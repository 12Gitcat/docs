# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-21 07:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Tikhon Skudarnov <semargsemarg@gmail.com>, 2018\n"
"Language-Team: Russian (https://www.transifex.com/dash/teams/37570/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../developers/compiling.rst:5
msgid "Compiling Dash Core"
msgstr "Компилирование клиента Dash Core"

#: ../../developers/compiling.rst:7
msgid ""
"While Dash offers stable binary builds on the `website "
"<https://www.dash.org/wallets>`_, on `GitHub "
"<https://github.com/dashpay/dash/releases>`_ and through development builds "
"using `Bamboo <https://bamboo.dash.org>`_, many users will also be "
"interested in building Dash binaries for themselves. The following guides "
"are available:"
msgstr ""
"Стабильные скомпилированные версии Dash можно найти на `сайте "
"<https://www.dash.org/wallets>`_ и на `GitHub "
"<https://github.com/dashpay/dash/releases>`_. Тестовые версии можно получить"
" с помощью `Bamboo <https://bamboo.dash.org>`_. Кроме того, пользователи "
"которые хотят скомпилировать бинарные файлы Dash самостоятельно, могут "
"использовать следующие руководства:"

#: ../../developers/compiling.rst:14
msgid "Eclipse (coming soon)"
msgstr "Eclipse (в разработке)"

#: ../../developers/compiling.rst:15
msgid ":ref:`Building on Linux <linux-build>`"
msgstr ":ref:`Компилирование на Linux <linux-build>`"

#: ../../developers/compiling.rst:16
msgid ":ref:`Gitian deterministic builds <gitian-build>`"
msgstr ":ref:`Gitian-детерминизированные версии <gitian-build>`"

#: ../../developers/compiling.rst:21
msgid "Linux"
msgstr "Linux"

#: ../../developers/compiling.rst:23
msgid ""
"This guide describes how to build Dash Core wallet without the GUI from "
"source under Ubuntu Linux. It is intended to serve as a simple guide for "
"general compilation of non-deterministic binary files from the stable source"
" code. A standard installation of Ubuntu Linux 16.04 LTS will be used as an "
"environment for the build. We assume you are running as a user with sudo "
"permissions. First add the necessary extra repository and update all "
"packages::"
msgstr ""
"Это руководство описывает компилирование кошелька Dash Core без графического"
" интерфейса на Ubuntu Linux. Оно задумано как простая инструкция по общему "
"процессу компиляции недетерминизированных бинарных файлов из стабильного "
"исходного кода. В качестве операционной системы используется стандартная "
"версия Ubuntu Linux 16.04 LTS. Предполагается также, что у вас есть "
"полномочия администратора системы. Прежде всего, добавьте необходимый "
"репозиторий и обновите все пакеты::"

#: ../../developers/compiling.rst:35
msgid ""
"Now install the dependencies as described in the installation "
"documentation::"
msgstr ""
"Теперь установите зависимости в соответствии с установочной документацией::"

#: ../../developers/compiling.rst:41
msgid ""
"Optionally install the Qt dependencies if you want to build the Dash GUI::"
msgstr ""
"На ваше усмотрение установите Qt-зависимости, если хотите получить "
"графический интерфейс Dash."

#: ../../developers/compiling.rst:46
msgid "Download the stable Dash repository::"
msgstr "Скачайте стабильный репозиторий Dash::"

#: ../../developers/compiling.rst:50
msgid "And build::"
msgstr "И версия::"

#: ../../developers/compiling.rst:58
msgid "``/usr/local/bin`` now contains the compiled Dash binaries."
msgstr "``/usr/local/bin`` содержит скомпилированные версии Dash."

#: ../../developers/compiling.rst:62
msgid "macOS"
msgstr ""

#: ../../developers/compiling.rst:64
msgid ""
"This guide describes how to build Dash Core wallet from source under macOS. "
"It is intended to serve as a simple guide for general compilation of non-"
"deterministic binary files from the stable source code. A standard "
"installation of macOS 10.13 High Sierra will be used as an environment for "
"the build. We assume you are running as a user with sudo permissions. First,"
" open a the **Terminal** app and enter the following command to install the "
"OS X command line tools::"
msgstr ""

#: ../../developers/compiling.rst:74
msgid ""
"When the popup appears, click **Install**. Then install `Homebrew "
"<https://brew.sh>`__::"
msgstr ""

#: ../../developers/compiling.rst:79
msgid "Install dependencies::"
msgstr ""

#: ../../developers/compiling.rst:83
msgid "Clone the Dash Core source code and change to the ``dash`` directory::"
msgstr ""

#: ../../developers/compiling.rst:88
msgid ""
"Build Dash Core. Configure and build the headless dash binaries as well as "
"the GUI (if Qt is found). You can disable the GUI build by passing "
"``--without-gui`` to configure::"
msgstr ""

#: ../../developers/compiling.rst:96
msgid "It is recommended to build and run the unit tests::"
msgstr ""

#: ../../developers/compiling.rst:100
msgid ""
"You can also create a ``.dmg`` that contains the ``.app`` bundle "
"(optional)::"
msgstr ""

#: ../../developers/compiling.rst:105
msgid "Dash Core is now available at ``./src/dashd``."
msgstr ""

#: ../../developers/compiling.rst:111
msgid "Gitian"
msgstr "Gitian"

#: ../../developers/compiling.rst:113
msgid ""
"Gitian is the deterministic build process that is used to build the Dash "
"Core executables. It provides a way to be reasonably sure that the "
"executables are really built from the source on GitHub. It also makes sure "
"that the same, tested dependencies are used and statically built into the "
"executable. Multiple developers build the source code by following a "
"specific descriptor (\"recipe\"), cryptographically sign the result, and "
"upload the resulting signature. These results are compared and only if they "
"match, the build is accepted and uploaded to dash.org."
msgstr ""
"Gitian - это процесс детерминизированной компиляции, который используется "
"для получения исполнительных файлов Dash Core. Он обеспечивает уверенность, "
"что исполнительные файлы были получены из источника на GitHub, а также что "
"при компиляции в конечный исполнительный файл были статично встроены "
"стабильные проверенные зависимости. Многие разработчики пишут исходный код с"
" использованием особых дескрипторов (\"рецептов\"), криптографически "
"подписывают результат и выгружают соответствующую подпись. Эти результаты "
"сравниваются и только при полном совпадении версия принимается и "
"выкладывается на dash.org."

#: ../../developers/compiling.rst:122
msgid ""
"More independent Gitian builders are needed, which is why this guide exists."
" It is preferred you follow these steps yourself instead of using someone "
"else's VM image to avoid 'contaminating' the build."
msgstr ""
"Эта инструкция была написана, потому что существует потребность в большем "
"количестве независимых версий на Gitian. Желательно, чтобы вы сами выполнили"
" указанные действия, а не использовали чью-то чужую VM-копию. Это нужно "
"чтобы не 'загрязнять' версию."

#: ../../developers/compiling.rst:127
msgid "Setup the host environment"
msgstr "Установка принимающей системы"

#: ../../developers/compiling.rst:129
msgid ""
"Gitian builds are known to be working on Debian 8.x. If your machine is "
"already running this system, you can perform Gitian builds on the actual "
"hardware. Alternatively, you can install it in a virtual machine. Follow the"
" guide for :ref:`setting up a VPS for masternodes <vps-setup>`, selecting a "
"Debian 8.x image during the installation process and naming your non-root "
"user ``gitianuser``. Selecting a VPS with two processors will also greatly "
"speed up the build process. If you cannot login to your VPS over SSH as "
"root, access the terminal and issue the following command::"
msgstr ""
"Gitian-версии работают на Debian 8.x. Если у вас уже установлена эта "
"система, то вы можете запускать Gitian-версии прямо на собственном "
"оборудовании. Если нет, то вы можете установить её на виртуальную машину. "
"Выполните :ref:`установку VPS для Мастернод <vps-setup>`, выбрав раздел "
"Debian 8.x во время процесса установки и назвав вашего пользователя без "
"администраторских полномочий ``gitianuser``. Выбрав для VPS машину с двумя "
"процессорами, вы значительно ускорите процесс построения. Если вы не можете "
"войти на свой VPS через SSH как администратор, то воспользуйтесь терминалом "
"и выполните следующие команды::"

#: ../../developers/compiling.rst:142
msgid ""
"Log in to your new environment by SSH as root. Set up the dependencies first"
" by pasting the following in the terminal::"
msgstr ""
"Войдите в вашу новую систему под SSH как администратор. Сначала установите "
"зависимости, скопировав в терминал следующие команды::"

#: ../../developers/compiling.rst:148
msgid ""
"Then set up LXC and the rest with the following, which is a complex jumble "
"of settings and workarounds::"
msgstr "Потом установите LXC и всё нижеследующее::"

#: ../../developers/compiling.rst:169
msgid ""
"At the end Debian is rebooted to make sure that the changes take effect. Re-"
"login as the user gitianuser that was created during installation. The rest "
"of the steps in this guide will be performed as that user."
msgstr ""
"В конце необходимо перезагрузить Debian, чтобы убедиться, что установки "
"вступили в силу. Перезайдите как пользователь gitianuser, которого вы "
"создали в ходе установки. Оставшиеся шаги в этом руководстве выполняются от "
"имени этого пользователя."

#: ../../developers/compiling.rst:173
msgid ""
"There is no ``python-vm-builder`` package in Debian, so we need to install "
"it from source ourselves::"
msgstr ""
"В Debian нет пакета ``python-vm-builder``, так что его придётся установить "
"из источника самостоятельно::"

#: ../../developers/compiling.rst:185
msgid "Set up the environment and compile"
msgstr "Установите среду и скомпилируйте"

#: ../../developers/compiling.rst:187
msgid "Clone the Dash Core repository to your home directory::"
msgstr "Клонируйте репозиторий Dash Core в свой каталог home::"

#: ../../developers/compiling.rst:191
msgid "Then create the script file::"
msgstr "Создайте скриптовый файл::"

#: ../../developers/compiling.rst:195
msgid ""
"And paste the following script in place (this will be automatic if/when the "
"script is pulled into Dash Core)::"
msgstr ""
"Вставьте следующий скрипт (это будет произведено автоматически когда и если "
"скрипт присутствует в Dash Core)::"

#: ../../developers/compiling.rst:200
msgid "Save the file and set it executable::"
msgstr "Сохраните файл и сделайте его исполнительным::"

#: ../../developers/compiling.rst:204
msgid ""
"Set up the environment, replacing the name and version with your name and "
"target version::"
msgstr ""
"Установите среду, заменив имя и версию своим именем и целевой версией::"

#: ../../developers/compiling.rst:209
msgid "Run the compilation script::"
msgstr "Запустите компилирующий скрипт::"

#: ../../developers/compiling.rst:213
msgid ""
"Your system will build all dependencies and Dash Core from scratch for "
"Windows and Linux platforms (macOS if the dependencies were installed "
"according to `these instructions "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`_). This can "
"take some time. When complete, you will see the SHA256 checksums, which you "
"can compare against the hashes available on the `Dash website "
"<https://www.dash.org/wallets>`_. In this way, you can be sure that you are "
"running original and untampered builds of the code as it exists on GitHub."
msgstr ""
"Ваша система построит версию клиента Dash Core со всеми зависимостями для "
"Windows и Linux (и для macOS, если зависимости были установлены в "
"соответствии с `этими инструкциями "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`_). Это может"
" занять какое-то время. По завершении вы увидите контрольные суммы SHA256, "
"которые можно сравнить с теми, что доступны на `сайте Dash "
"<https://www.dash.org/wallets>`_. Теперь вы можете быть уверены, что "
"используете оригинальную неизменённую версию кода, который приведён на "
"GitHub."
