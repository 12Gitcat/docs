# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Ivan SIerraalta <ivansierraalta@gmail.com>, 2018
# Jahlexis Tafari <ras.alexislugo.i@gmail.com>, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-30 09:45+0000\n"
"PO-Revision-Date: 2018-04-16 05:42+0000\n"
"Last-Translator: Jahlexis Tafari <ras.alexislugo.i@gmail.com>, 2018\n"
"Language-Team: Spanish (https://www.transifex.com/dash/teams/37570/es/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../developers/compiling.rst:1
msgid ""
"Compile Dash Core for Linux, macOS, Windows and Gitian deterministic builds"
msgstr ""
"Compilar Dash Core para compilaciones deterministas en Linux, macOS, Windows"
" y Gitian."

#: ../../developers/compiling.rst:1
msgid ""
"dash, build, compile, linux, Jenkins, macOS, windows, binary, Gitian, "
"developers"
msgstr ""
"dash, compilar, linux, Jenkins, macOS, windows, binario, Gitian, "
"desarrolladores"

#: ../../developers/compiling.rst:9
msgid "Compiling Dash Core"
msgstr "Compilando Dash Core"

#: ../../developers/compiling.rst:11
msgid ""
"While Dash offers stable binary builds on the `website "
"<https://www.dash.org/wallets>`_ and on `GitHub "
"<https://github.com/dashpay/dash/releases>`_, and development builds using "
"`Jenkins <https://jenkins.dash.org/blue/organizations/jenkins/dashpay-dash-"
"gitian-nightly/activity/>`_, many users will also be interested in building "
"Dash binaries for themselves. The following guides are available:"
msgstr ""
"Mientras Dash ofrece compilaciones binarias estables en el `sitio web "
"<https://www.dash.org/wallets>`_, y en `GitHub "
"<https://github.com/dashpay/dash/releases>`_, y compilaciones desarrolladas "
"utilizando `Jenkins <https://jenkins.dash.org/blue/organizations/jenkins"
"/dashpay-dash-gitian-nightly/activity/>`_, muchos usuarios también estarán "
"interesados en compilar binarios de Dash para ellos mismos. Las siguientes "
"guías están disponibles:"

#: ../../developers/compiling.rst:18
msgid ":ref:`Building on Linux <linux-build>`"
msgstr ":ref:`Construir en Linux <linux-build>`"

#: ../../developers/compiling.rst:19
msgid ":ref:`Building on macOS <macos-build>`"
msgstr ":ref:`Compilando en macOS <macos-build>`"

#: ../../developers/compiling.rst:20
msgid ":ref:`Building on Windows <windows-build>`"
msgstr ":ref:`Compilando en Windows <windows-build>`"

#: ../../developers/compiling.rst:21
msgid ":ref:`Gitian deterministic builds <gitian-build>`"
msgstr ":ref:`Gitian compilaciones deterministas <gitian-build>`"

#: ../../developers/compiling.rst:23
msgid ""
"These guides describe how to build the current stable version. To build the "
"latest version from the develop branch, replace the normal ``git clone`` "
"command with the following command when pulling from GitHub::"
msgstr ""
"Estas guías describen como compilar la versión estable actual. Para compilar"
" la ultima versión desde la rama desarrollada, reemplace el comando normal "
"``git clone`` con el siguiente comando cuando la traiga de GitHub::"

#: ../../developers/compiling.rst:32
msgid "Linux"
msgstr "Linux"

#: ../../developers/compiling.rst:34
msgid ""
"This guide describes how to build Dash Core wallet without the GUI from "
"source under Ubuntu Linux. For a more detailed guide, see the `Unix Build "
"Notes <https://github.com/dashpay/dash/blob/master/doc/build-unix.md>`__. "
"The content on this page is intended to serve as a simple guide for general "
"compilation of non-deterministic binary files from the stable source code. A"
" standard installation of Ubuntu Linux 18.04 LTS will be used as an "
"environment for the build. We assume you are running as a user with sudo "
"permissions. First add the necessary extra repository and update all "
"packages::"
msgstr ""
"Esta guía describe cómo compilación la billetera Dash Core sin la GUI de la "
"fuente en Linux Ubuntu. Para una guia mas detallada, vea las `Notas de "
"Compilación de Unix <https://github.com/dashpay/dash/blob/master/doc/build-"
"unix.md>`__. El contenido en esta pagina sirve como una guía simple para la "
"compilación general de archivos binarios no deterministas a partir del "
"código fuente estable. Se utilizara una instalación estándar de Linux Ubuntu"
" 18.04 LTS como entorno para la compilación. Suponemos que estás ejecutando "
"como usuario con permisos sudo. Primero agrega el repositorio adicional "
"necesario y actualiza todos los paquetes::"

#: ../../developers/compiling.rst:48 ../../developers/compiling.rst:98
#: ../../developers/compiling.rst:218
msgid ""
"Now install the dependencies as described in the installation "
"documentation::"
msgstr ""
"Ahora instala las dependencias como se describe en la documentación de "
"instalación::"

#: ../../developers/compiling.rst:54 ../../developers/compiling.rst:105
#: ../../developers/compiling.rst:225
msgid ""
"Optionally install the Qt dependencies if you want to build the Dash GUI::"
msgstr ""
"De manera opcional, instala las dependencias de Qt si deseas compilar la GUI"
" de Dash::"

#: ../../developers/compiling.rst:59 ../../developers/compiling.rst:110
#: ../../developers/compiling.rst:230
msgid "Download the stable Dash repository::"
msgstr "Descarga el repositorio estable de Dash::"

#: ../../developers/compiling.rst:63 ../../developers/compiling.rst:138
#: ../../developers/compiling.rst:242
msgid "And build::"
msgstr "Y construye::"

#: ../../developers/compiling.rst:71
msgid "``/usr/local/bin`` now contains the compiled Dash binaries."
msgstr "``/usr/local/bin`` ahora contiene los binarios compilados de Dash."

#: ../../developers/compiling.rst:76
msgid "macOS"
msgstr "macOS"

#: ../../developers/compiling.rst:78
msgid ""
"Dash can be built for macOS either using a cross-compiler under Linux or "
"natively under macOS."
msgstr ""

#: ../../developers/compiling.rst:82
msgid "Linux cross-compile"
msgstr ""

#: ../../developers/compiling.rst:84
msgid ""
"This guide describes how to build Dash Core wallet from source under Ubuntu "
"Linux. It is intended to serve as a simple guide for general compilation of "
"non-deterministic binary files from the stable source code. For a more "
"detailed guide, see the `macOS Build Notes "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`__. A "
"standard installation of Ubuntu Linux 18.04 LTS will be used as an "
"environment for the build. We assume you are running as a user with sudo "
"permissions. First add the necessary extra repository and update all "
"packages::"
msgstr ""

#: ../../developers/compiling.rst:115
msgid ""
"A copy of the macOS SDK is required during the build process. To download "
"this, use a Google Chrome in a desktop environment to go to "
"https://appleid.apple.com and create or sign in to your Apple account. Then "
"go to https://developer.apple.com and open the Chrome Developer Tools from "
"the **Menu -> More tools -> Developer tools**. Click on the **Network** tab,"
" then go back to your main browser window and copy in the following URL::"
msgstr ""

#: ../../developers/compiling.rst:125
msgid ""
"Cancel the download as soon as it begins and go back to your the **Network**"
" tab in the developer tools. Right click on the network request at the "
"bottom of the list labeled **Xcode_7.3.1.dmg** and select **Copy -> Copy as "
"cURL (bash)**. Paste this long string of text into your Linux terminal, "
"append ``-o Xcode_7.3.1.dmg`` at the end and then press enter to begin the "
"download. Once it is complete, extract the required files from the disc "
"image as follows::"
msgstr ""

#: ../../developers/compiling.rst:145 ../../developers/compiling.rst:248
msgid ""
"``~/dash/src`` now contains the compiled Dash binaries, and "
"``~/dash/src/qt`` contains the Dash GUI wallet."
msgstr ""
"``~/dash/src`` ahora contiene los binarios compilados de Dash, y "
"``~/dash/src/qt`` contiene la GUI de la billetera GUI."

#: ../../developers/compiling.rst:150
msgid "macOS Native"
msgstr ""

#: ../../developers/compiling.rst:152
msgid ""
"This guide describes how to build Dash Core wallet from source under macOS. "
"It is intended to serve as a simple guide for general compilation of non-"
"deterministic binary files from the stable source code. For a more detailed "
"guide, see the `macOS Build Notes "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`__. A "
"standard installation of macOS 10.13 High Sierra will be used as an "
"environment for the build. We assume you are running as a user with sudo "
"permissions. First, open a the **Terminal** app and enter the following "
"command to install the OS X command line tools::"
msgstr ""
"Esta guía describe cómo compilar la billetera Dash Core desde la fuente bajo"
" macOS. Está pensado para servir como una guía simple para la compilación "
"general de archivos binarios no deterministas del código fuente estable. "
"Para una guía mas detallada vea las `Notas de Compilación macOS "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`__. Se "
"utilizara una instalación estándar de macOS 10.13 High Sierra como entorno "
"para la compilación. Suponemos que estás ejecutando como usuario con "
"permisos sudo. Primero, abra un **Terminal** e ingrese el siguiente comando "
"para instalar las herramientas de linea de comando de OS X::"

#: ../../developers/compiling.rst:164
msgid ""
"When the popup appears, click **Install**. Then install `Homebrew "
"<https://brew.sh>`__::"
msgstr ""
"Cuando la ventana emergente aparezca, haz clic en **Instalar**. Luego "
"instale `Homebrew <https://brew.sh>`__::"

#: ../../developers/compiling.rst:169
msgid "Install dependencies::"
msgstr "Instalar dependencias::"

#: ../../developers/compiling.rst:173
msgid "Clone the Dash Core source code and change to the ``dash`` directory::"
msgstr ""
"Clonar el codigo fuente de la Dash Core y cambiar al directorio ``dash``::"

#: ../../developers/compiling.rst:178
msgid ""
"Build Dash Core. Configure and build the headless dash binaries as well as "
"the GUI (if Qt is found). You can disable the GUI build by passing "
"``--without-gui`` to configure::"
msgstr ""
"Compilar Dash Core. Configura y compila los cabeceras de los binarios dash "
"así como la GUI (si se encuentra la Qt). Puedes deshabilitar la compilación "
"GUI pasando ``--without-gui`` para configurar::"

#: ../../developers/compiling.rst:186
msgid "It is recommended to build and run the unit tests::"
msgstr "Es recomendado para compilar y ejecutar las pruebas unitarias::"

#: ../../developers/compiling.rst:190
msgid ""
"You can also create a ``.dmg`` that contains the ``.app`` bundle "
"(optional)::"
msgstr ""
"También puedes crear un ``.dmg`` que contiene el paquete ``.app`` "
"(opcional)::"

#: ../../developers/compiling.rst:195
msgid "Dash Core is now available at ``./src/dashd``."
msgstr "La Dash Core ahora esta disponible en ``./src/dashd``."

#: ../../developers/compiling.rst:200
msgid "Windows"
msgstr "Windows"

#: ../../developers/compiling.rst:202
msgid ""
"This guide describes how to build Dash Core wallet from source for 64-bit "
"Windows. Most developers use cross-compilation from Linux to build "
"executables for Windows. The content on this page is intended to serve as a "
"simple guide for general compilation of non-deterministic binary files from "
"the stable source code. For a more detailed guide, see the `Windows Build "
"Notes <https://github.com/dashpay/dash/blob/master/doc/build-windows.md>`__."
" A standard installation of Ubuntu Linux 18.04 LTS will be used as an "
"environment for the build. We assume you are running as a user with sudo "
"permissions. First add the necessary extra repository and update all "
"packages::"
msgstr ""
"Esta guía describe cómo compilar la billetera Dash Core desde la fuente para"
" Windows 64-bit. La mayoria de los desarrolladores usan compilación cruzada "
"desde liux para compilar ejecutables para Windows. El contenido de esta "
"pagina está pensado para servir como una guía simple para la compilación "
"general de archivos binarios no deterministas del código fuente estable. "
"Para una guía mas detallada, vea las `Notas de Compilación de Windows "
"<https://github.com/dashpay/dash/blob/master/doc/build-windows.md>`__. Una "
"insalción estandar de Linux Ubuntu 18.04 LTS sera usada como ambiente para "
"la compilación. Suponemos que estás ejecutando como usuario con permisos "
"sudo. Primero agrega el repositorio adicional necesario y actualiza todos "
"los paquetes::"

#: ../../developers/compiling.rst:234
msgid "Build and link the depends system::"
msgstr "Compilar y enlazar los sistemas dependientes::"

#: ../../developers/compiling.rst:254
msgid "Gitian"
msgstr "Gitian"

#: ../../developers/compiling.rst:256
msgid ""
"Gitian is the deterministic build process that is used to build the Dash "
"Core executables. It provides a way to be reasonably sure that the "
"executables are really built from the source on GitHub. It also makes sure "
"that the same, tested dependencies are used and statically built into the "
"executable. Multiple developers build the source code by following a "
"specific descriptor (\"recipe\"), cryptographically sign the result, and "
"upload the resulting signature. These results are compared and only if they "
"match, the build is accepted and uploaded to dash.org."
msgstr ""
"Gitian es el proceso de compilación determinista que se utiliza para "
"compilar los ejecutables de Dash Core. Proporciona una forma de estar "
"razonablemente seguro de que los ejecutables están realmente construidos "
"desde la fuente en GitHub. También se asegura de que se usen las mismas "
"dependencias probadas y estén integradas estáticamente en el ejecutable. "
"Múltiples desarrolladores crean el código fuente siguiendo un descriptor "
"específico (\"receta\"), firman criptográficamente el resultado y cargan la "
"firma resultante. Estos resultados se comparan y solo si coinciden, la "
"compilación es aceptada y cargada en dash.org."

#: ../../developers/compiling.rst:265
msgid ""
"More independent Gitian builders are needed, which is why this guide exists."
" It is preferred you follow these steps yourself instead of using someone "
"else's VM image to avoid 'contaminating' the build."
msgstr ""
"Se necesitan constructores de Gitian más independientes, razón por la cual "
"existe esta guía. Es preferible que sigas estos pasos tu mismo en lugar de "
"usar la imagen de VM de otra persona para evitar 'contaminar' la "
"compilación."

#: ../../developers/compiling.rst:270
msgid "Setup the host environment"
msgstr "Configurar el entorno de alojamiento"

#: ../../developers/compiling.rst:272
msgid ""
"Gitian builds are known to be working on Debian 8.x. If your machine is "
"already running this system, you can perform Gitian builds on the actual "
"hardware. Alternatively, you can install it in a virtual machine. Follow the"
" guide for :ref:`setting up a VPS for masternodes <vps-setup>`, selecting a "
"Debian 8.x image during the installation process and naming your non-root "
"user ``gitianuser``. Selecting a VPS with two processors will also greatly "
"speed up the build process. If you cannot login to your VPS over SSH as "
"root, access the terminal and issue the following command::"
msgstr ""
"Se sabe que las versiones de Gitian están trabajando en Debian 8.x. Si tu "
"máquina ya está ejecutando este sistema, puedes realizar compilaciones de "
"Gitian en el hardware actual. Alternativamente, puedes instalarlo en una "
"máquina virtual. Siguiendo la guía para :ref:`configurar un VPS para "
"masternodes <vps-setup>`, seleccionando una imagen de Debian 8.x durante el "
"proceso de instalación y nombrando a tu usuario non-root ``gitianuser``. "
"Seleccionar un VPS con dos procesadores también acelerará en gran medida el "
"proceso de compilación. Si no puedes iniciar sesión en tu VPS a través de "
"SSH como root, accede al terminal y emite el siguiente comando::"

#: ../../developers/compiling.rst:285
msgid ""
"Log in to your new environment by SSH as root. Set up the dependencies first"
" by pasting the following in the terminal::"
msgstr ""
"Inicia sesión en su tuevo entorno mediante SSH como raíz. Configura las "
"dependencias primero pegando lo siguiente en el terminal::"

#: ../../developers/compiling.rst:291
msgid ""
"Then set up LXC and the rest with the following, which is a complex jumble "
"of settings and workarounds::"
msgstr ""
"Luego configura LXC y el resto con lo siguiente, que es una mezcla compleja "
"de configuraciones y soluciones::"

#: ../../developers/compiling.rst:312
msgid ""
"At the end Debian is rebooted to make sure that the changes take effect. Re-"
"login as the user gitianuser that was created during installation. The rest "
"of the steps in this guide will be performed as that user."
msgstr ""
"Al final, Debian se reinicia para garantizar que los cambios entren en "
"vigencia. Vuelve a iniciar sesión como el usuario gitianuser que se creó "
"durante la instalación. El resto de los pasos en esta guía se realizarán "
"como ese usuario."

#: ../../developers/compiling.rst:316
msgid ""
"There is no ``python-vm-builder`` package in Debian, so we need to install "
"it from source ourselves::"
msgstr ""
"No existe el paquete ``python-vm-builder`` en Debian, por lo que debemos "
"instalarlo desde la fuente nosotros mismos::"

#: ../../developers/compiling.rst:328
msgid "Set up the environment and compile"
msgstr "Configurar el entorno y compilar"

#: ../../developers/compiling.rst:330
msgid "Clone the Dash Core repository to your home directory::"
msgstr "Clona el repositorio de Dash Core en tu directorio personal::"

#: ../../developers/compiling.rst:334
msgid "Then create the script file::"
msgstr "Luego crea el archivo de script::"

#: ../../developers/compiling.rst:338
msgid ""
"And paste the following script in place (this will be automatic if/when the "
"script is pulled into Dash Core)::"
msgstr ""
"Y pega el siguiente script en su lugar (esto será automático si/cuando el "
"script se inserta en Dash Core)::"

#: ../../developers/compiling.rst:343
msgid "Save the file and set it executable::"
msgstr "Guarda el archivo y configúralo como ejecutable::"

#: ../../developers/compiling.rst:347
msgid ""
"Set up the environment, replacing the name and version with your name and "
"target version::"
msgstr ""
"Configurar el entorno, reemplazando el nombre y la versión con tu nombre y "
"versión de destino::"

#: ../../developers/compiling.rst:352
msgid "Run the compilation script::"
msgstr "Ejecuta el script de compilación::"

#: ../../developers/compiling.rst:356
msgid ""
"Your system will build all dependencies and Dash Core from scratch for "
"Windows and Linux platforms (macOS if the dependencies were installed "
"according to `these instructions "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`_). This can "
"take some time. When complete, you will see the SHA256 checksums, which you "
"can compare against the hashes available on the `Dash website "
"<https://www.dash.org/wallets>`_. In this way, you can be sure that you are "
"running original and untampered builds of the code as it exists on GitHub."
msgstr ""
"Tu sistema creará todas las dependencias y la Dash Core desde cero para "
"plataformas Windows y Linux (en macOS si las dependencias se instalaron de "
"acuerdo con `estas instrucciones "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`_). Esto "
"puede llevar algo de tiempo. Cuando se complete, verás las sumas de "
"comprobación SHA256, con las que puedes comparar con los valores disponibles"
" en el `Sitio web de Dash <https://www.dash.org/wallets>`_. De esta manera, "
"puedes estar seguro de que estás ejecutando compilaciones originales y sin "
"restricciones del código tal como existe en GitHub."
