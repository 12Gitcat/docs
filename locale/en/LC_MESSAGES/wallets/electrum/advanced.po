# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-11 06:39+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../wallets/electrum/advanced.rst:5
msgid "Advanced functions"
msgstr ""

#: ../../wallets/electrum/advanced.rst:7
msgid ""
"Dash Electrum is based on `Electrum <https://electrum.org>`_, a Bitcoin "
"wallet. Most functions are identical, which means it is not necessary to "
"reproduce the entirety of the Electrum documentation here. The following "
"sections describe some frequently used advanced functions. For further "
"details on other advanced functions in Electrum for both Bitcoin and "
"Dash, please click the links below."
msgstr ""

#: ../../wallets/electrum/advanced.rst:14
msgid "`Electrum documentation <http://docs.electrum.org>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:15
msgid ""
"`Electrum seed version system "
"<http://docs.electrum.org/en/latest/seedphrase.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:16
msgid ""
"`Electrum protocol specification "
"<http://docs.electrum.org/en/latest/protocol.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:17
msgid ""
"`Serialization of unsigned or partially signed transactions "
"<http://docs.electrum.org/en/latest/transactions.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:18
msgid ""
"`Simple Payment Verification "
"<http://docs.electrum.org/en/latest/spv.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:19
msgid "`The Python Console <http://docs.electrum.org/en/latest/console.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:20
msgid ""
"`Using Electrum Through Tor "
"<http://docs.electrum.org/en/latest/tor.html>`_"
msgstr ""

#: ../../wallets/electrum/advanced.rst:23
msgid "Masternodes in Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:25
msgid ""
"Dash Electrum supports masternode creation through an interface called "
"the **Masternode Manager**. The functionality is available starting from "
"the protocol version 70201."
msgstr ""

#: ../../wallets/electrum/advanced.rst:30
msgid "Masternode Manager"
msgstr ""

#: ../../wallets/electrum/advanced.rst:32
msgid ""
"The Masternode Manager can be accessed either from the **Wallet > "
"Masternodes** menu or by pressing **Ctrl+M**. This manager displays the "
"status of your masternode(s). A wallet with no masternodes will begin "
"with a default masternode for which you can fill in the necessary "
"information."
msgstr ""

#: ../../wallets/electrum/advanced.rst:38
msgid ""
"The manager displays the following data about each masternode you have "
"set up:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:41
msgid "The alias (name) of the masternode."
msgstr ""

#: ../../wallets/electrum/advanced.rst:42
msgid "The status of the masternode (e.g. whether it has been activated)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:43
msgid "The collateral payment of the masternode."
msgstr ""

#: ../../wallets/electrum/advanced.rst:44
msgid "The private delegate key."
msgstr ""

#: ../../wallets/electrum/advanced.rst:45
msgid "The IP address and port that your masternode can be reached at."
msgstr ""

#: ../../wallets/electrum/advanced.rst:46
msgid "The protocol version that your masternode supports."
msgstr ""

#: ../../wallets/electrum/advanced.rst:49
msgid "Masternode setup"
msgstr ""

#: ../../wallets/electrum/advanced.rst:51
msgid ""
"A masternode requires a \"delegate\" key, which is known to both Dash "
"Electrum and your masternode. Your masternode will use this key to sign "
"messages, and the Dash network will know that you authorized it to. A "
"delegate key can either be one of your Dash Electrum keys, or an imported"
" key. Either way, your masternode and Dash Electrum will both need to "
"know the private key."
msgstr ""

#: ../../wallets/electrum/advanced.rst:58
msgid ""
"To use one of your Dash Electrum keys as a delegate key, put its private "
"key in the **Masternode Private Key** field of the **View Masternode** "
"tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:63
msgid "IP address and protocol version"
msgstr ""

#: ../../wallets/electrum/advanced.rst:65
msgid ""
"Certain information about your masternode is required. The IP address and"
" port that your masternode uses must be supplied. Also, the protocol "
"version that your masternode supports is required. This information is "
"filled in automatically if you import a \"masternode.conf\" file."
msgstr ""

#: ../../wallets/electrum/advanced.rst:73
#: ../../wallets/electrum/advanced.rst:90
#: ../../wallets/electrum/advanced.rst:111
msgid "Entering IP and protocol information"
msgstr ""

#: ../../wallets/electrum/advanced.rst:76
msgid "Collateral"
msgstr ""

#: ../../wallets/electrum/advanced.rst:78
msgid ""
"To start a masternode, you must have a 1000 DASH payment available in "
"your wallet. You can scan your wallet for 1000 DASH payments in the "
"**Choose Collateral** tab of the Masternode Manager."
msgstr ""

#: ../../wallets/electrum/advanced.rst:82
msgid ""
"After scanning, a list of available 1000 DASH collateral payments will be"
" displayed. Selecting one of them will cause the selected masternode's "
"data to be filled in, though these changes won't be saved until you click"
" the **Save** button in the lower-right corner of the tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:93
msgid "Activating your masternode"
msgstr ""

#: ../../wallets/electrum/advanced.rst:95
msgid ""
"After selecting a collateral payment and specifying a delegate key, you "
"can activate your masternode. Do this by clicking **Activate Masternode**"
" in the **Activate Masternode** tab of the Masternode Manager. If the "
"**Activate Masternode** button cannot be clicked, look at the message in "
"the **Status** bar. It will show you why your masternode cannot be "
"activated."
msgstr ""

#: ../../wallets/electrum/advanced.rst:102
msgid ""
"Activation will require your password if your wallet is encrypted, "
"because a message must be signed. After waiting for Dash Electrum to sign"
" and broadcast your masternode announcement, you will be presented with a"
" message detailing the result. The status of your masternode will be "
"updated in the table and the **View Masternode** tab."
msgstr ""

#: ../../wallets/electrum/advanced.rst:114
msgid "Importing masternode.conf"
msgstr ""

#: ../../wallets/electrum/advanced.rst:116
msgid ""
"You can import a *masternode.conf* file using the **Masternode.conf** tab"
" of the Masternode Manager. This is the recommended way of setting up "
"masternodes, as it allows you to configure masternodes for Dash Core and "
"Dash Electrum in the same way. Importing a *masternode.conf* file will "
"automatically set up one or more masternode configurations in the "
"Masternode Manager."
msgstr ""

#: ../../wallets/electrum/advanced.rst:124
msgid "Multisig wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:126
msgid ""
"This tutorial shows how to create a 2 of 2 multisig wallet. A 2 of 2 "
"multisig consists of 2 separate wallets (usually on separate machines and"
" potentially controlled by separate people) that have to be used in "
"conjunction in order to access the funds. Both wallets have the same set "
"of addresses."
msgstr ""

#: ../../wallets/electrum/advanced.rst:132
msgid ""
"A common use-case for this is if you want to collaboratively control "
"funds: maybe you and your friend run a company together and certain funds"
" should only be spendable if you both agree."
msgstr ""

#: ../../wallets/electrum/advanced.rst:136
msgid ""
"Another one is security: one of the wallets can be on your main machine, "
"while the other one is on a offline machine. That way you make it very "
"hard for an attacker or malware to steal your coins."
msgstr ""

#: ../../wallets/electrum/advanced.rst:141
msgid "Create a pair of 2-of-2 wallets"
msgstr ""

#: ../../wallets/electrum/advanced.rst:143
msgid ""
"Each cosigner needs to do this: In the menu select **File > New**, then "
"select **Multi-signature wallet**. On the next screen, select 2 of 2."
msgstr ""

#: ../../wallets/electrum/advanced.rst:149
msgid "Selecting x of y signatures for a multi-signature wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:151
msgid ""
"After generating and confirming your recovery seed, you will be shown the"
" xpub address for this wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:156
msgid "xpub key of the first wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:158
msgid ""
"After generating a seed (keep it safely!) you will need to provide the "
"master public key of the other wallet. Of course when you create the "
"other wallet, you put the master public key of the first wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:165
msgid "Entering xpub from the second wallet in the first wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:167
msgid ""
"You will need to do this in parallel for the two wallets. Note that you "
"can press cancel during this step, and reopen the file later."
msgstr ""

#: ../../wallets/electrum/advanced.rst:171
msgid "Receiving"
msgstr ""

#: ../../wallets/electrum/advanced.rst:173
msgid ""
"Check that both wallets generate the same set of Addresses. You can now "
"send to these **Addresses** (note they start with a “7”) with any wallet "
"that can send to P2SH Addresses."
msgstr ""

#: ../../wallets/electrum/advanced.rst:178
msgid "Sending"
msgstr ""

#: ../../wallets/electrum/advanced.rst:180
msgid ""
"To spend coins from a 2-of-2 wallet, two cosigners need to sign a "
"transaction collaboratively. To accomplish this, create a transaction "
"using one of the wallets (by filling out the form on the **Send** tab). "
"After signing, a window is shown with the transaction details."
msgstr ""

#: ../../wallets/electrum/advanced.rst:188
msgid "Partially signed 2-of-2 multisig transaction in Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:190
msgid ""
"The transaction now has to be sent to the second wallet. Several options "
"are available for this:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:193
msgid "You can transfer the file on a USB stick"
msgstr ""

#: ../../wallets/electrum/advanced.rst:195
msgid ""
"You can save the partially signed transaction to a file (using the "
"**Save** button), transfer that to the machine where the second wallet is"
" running (via USB stick, for example) and load it there (using **Tools > "
"Load transaction > From file**)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:200
msgid "You can use QR codes"
msgstr ""

#: ../../wallets/electrum/advanced.rst:202
msgid ""
"A button showing a QR code icon is also available. Clicking this button "
"will display a QR code containing the transaction, which can be scanned "
"into the second wallet (**Tools > Load Transaction > From QR Code**)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:207
msgid ""
"With both of the above methods, you can now add the second signature to "
"the transaction (using the **Sign** button). It will then be broadcast to"
" the network."
msgstr ""

#: ../../wallets/electrum/advanced.rst:214
msgid "Fully signed 2-of-2 multisig transaction in Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:217
msgid "Sweep a paper wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:219
msgid ""
"You may have received a paper wallet as a gift from another Dash user, or"
" previously stored one in a safe deposit box. Funds are swept from a "
":ref:`paper wallet <paper-wallets>` into a live wallet by importing its "
"`private key <http://bitzuma.com/posts /six-things-bitcoin-users-should- "
"know-about-private-keys/>`_, which is a long sequence of characters "
"starting with the number \"7\" or the capital letter \"X\". The example "
"below displays a private key (WIF format)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:230
msgid ""
"Public address and associated private key produced by Dash Paper Wallet "
"Generator"
msgstr ""

#: ../../wallets/electrum/advanced.rst:233
msgid ""
"Funds from paper wallets are swept into an Dash Electrum Wallet by "
"creating a transaction using the private key and sending it to a new "
"address from your wallet. This is necessary because it is not possible to"
" add new public or private keys to an existing deterministic series of "
"addresses derived from a seed phrase."
msgstr ""

#: ../../wallets/electrum/advanced.rst:239
msgid ""
"Begin by selecting the **Wallet** > **Private Keys** > **Sweep** menu "
"item. The **Sweep private keys** dialog will appear, where you can paste "
"your private key(s). An unused address controlled by your Dash Electrum "
"wallet appears in the lower field, and can be changed by clicking the "
"**Address** button. Once you have pasted your private key, click the "
"**Sweep** button."
msgstr ""

#: ../../wallets/electrum/advanced.rst:249
msgid "Entering the private key"
msgstr ""

#: ../../wallets/electrum/advanced.rst:251
msgid ""
"Dash Electrum then prepares a transaction using the private key you just "
"imported to derive the public address for the transaction input and the "
"address from your wallet as the output, and signs the message. Click "
"**Broadcast** to enter the transaction on the blockchain. The balance "
"will then appear in your wallet under the specified address. The address "
"you swept is left with zero balance."
msgstr ""

#: ../../wallets/electrum/advanced.rst:261
msgid "Broadcasting the sweep transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:267
msgid "Cold storage"
msgstr ""

#: ../../wallets/electrum/advanced.rst:269
msgid ""
"This section shows how to create an offline wallet that holds your Dash "
"and a watching-only online wallet that is used to view its history and to"
" create transactions that have to be signed with the offline wallet "
"before being broadcast on the online one."
msgstr ""

#: ../../wallets/electrum/advanced.rst:275
msgid "Create an offline wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:277
msgid ""
"Create a wallet on an offline machine, as per the usual process (**File >"
" New**). After creating the wallet, go to **Wallet -> Master Public "
"Keys**."
msgstr ""

#: ../../wallets/electrum/advanced.rst:283
#: ../../wallets/electrum/advanced.rst:300
msgid "Master Public Key of a new offline wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:285
msgid ""
"The Master Public Key of your wallet is the string shown in this popup "
"window. Transfer that key to your online machine somehow."
msgstr ""

#: ../../wallets/electrum/advanced.rst:289
msgid "Create a watching-only version of your wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:291
msgid ""
"On your online machine, open Dash Electrum and select **File > "
"New/Restore**. Enter a name for the wallet and select **Use public or "
"private keys**. Paste your master public key in the box. Click **Next** "
"to complete the creation of your wallet. When you’re done, you should see"
" a popup informing you that you are opening a watching-only wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:302
msgid "The transaction history of your cold wallet should then appear."
msgstr ""

#: ../../wallets/electrum/advanced.rst:305
#: ../../wallets/electrum/advanced.rst:477
msgid "Create an unsigned transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:307
msgid ""
"Go to the **Send** tab on your online watching-only wallet, input the "
"transaction data and click **Send**. A window will appear to inform you "
"that a transaction fee will be added. Continue. In the window that "
"appears up, click **Save** and save the transaction file somewhere on "
"your computer. Close the window and transfer the transaction file to your"
" offline machine (e.g. with a USB stick)."
msgstr ""

#: ../../wallets/electrum/advanced.rst:315
msgid "Sign your transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:317
msgid ""
"On your offline wallet, select **Tools > Load transaction -> From file** "
"in the menu and select the transaction file created in the previous step."
" Click **Sign**. Once the transaction is signed, the Transaction ID "
"appears in its designated field. Click **Save**, store the file somewhere"
" on your computer, and transfer it back to your online machine."
msgstr ""

#: ../../wallets/electrum/advanced.rst:324
msgid "Broadcast your transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:326
msgid ""
"On your online machine, select **Tools -> Load transaction -> From file**"
" from the menu. Select the signed transaction file. In the window that "
"opens up, click **Broadcast**. The transaction will be broadcast over the"
" Dash network."
msgstr ""

#: ../../wallets/electrum/advanced.rst:332
msgid "Command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:334
msgid ""
"Dash Electrum has a powerful command line available when running under "
"Linux or macOS. This section will show you a few basic principles."
msgstr ""

#: ../../wallets/electrum/advanced.rst:338
msgid "Using the inline help"
msgstr ""

#: ../../wallets/electrum/advanced.rst:340
msgid "To see the list of Dash Electrum commands, type::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:344
msgid "To see the documentation for a command, type::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:349
msgid "Magic words"
msgstr ""

#: ../../wallets/electrum/advanced.rst:351
msgid ""
"The arguments passed to commands may be one of the following magic words:"
" `! ? : -`."
msgstr ""

#: ../../wallets/electrum/advanced.rst:353
msgid ""
"The exclamation mark `!` is a shortcut that means ‘the maximum amount "
"available’. Note that the transaction fee will be computed and deducted "
"from the amount. Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:359
msgid ""
"A question mark `?` means that you want the parameter to be prompted. "
"Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:364
msgid ""
"Use a colon `:` if you want the prompted parameter to be hidden (not "
"echoed in your terminal). Note that you will be prompted twice in this "
"example, first for the private key, then for your wallet password::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:370
msgid ""
"A parameter replaced by a dash `-` will be read from standard input (in a"
" pipe)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:376
msgid "Aliases"
msgstr ""

#: ../../wallets/electrum/advanced.rst:378
msgid "You can use DNS aliases in place of bitcoin addresses, in most commands::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:383
msgid "Formatting outputs using jq"
msgstr ""

#: ../../wallets/electrum/advanced.rst:385
msgid ""
"Command outputs are either simple strings or json structured data. A very"
" useful utility is the ‘jq’ program. Install it with::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:390
msgid "The following examples use it."
msgstr ""

#: ../../wallets/electrum/advanced.rst:393
msgid "Sign and verify message"
msgstr ""

#: ../../wallets/electrum/advanced.rst:395
msgid "We may use a variable to store the signature, and verify it::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:399
msgid "And::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:404
msgid "Show the values of your unspents"
msgstr ""

#: ../../wallets/electrum/advanced.rst:406
msgid ""
"The `listunspent` command returns a list of dict objects, with various "
"fields. Suppose we want to extract the `value` field of each record. This"
" can be achieved with the jq command::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:413
msgid "Select only incoming transactions from history"
msgstr ""

#: ../../wallets/electrum/advanced.rst:415
msgid "Incoming transactions have a positive ‘value’ field::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:420
msgid "Filter transactions by date"
msgstr ""

#: ../../wallets/electrum/advanced.rst:422
msgid ""
"The following command selects transactions that were timestamped after a "
"given date::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:428
msgid "Similarly, we may export transactions for a given time period::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:435
msgid "Encrypt and decrypt messages"
msgstr ""

#: ../../wallets/electrum/advanced.rst:437
msgid "First we need the public key of a wallet address::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:441
msgid "Encrypt::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:445
msgid "Decrypt::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:449
msgid ""
"Note: this command will prompt for the encrypted message, then for the "
"wallet password."
msgstr ""

#: ../../wallets/electrum/advanced.rst:453
msgid "Export private keys and sweep coins"
msgstr ""

#: ../../wallets/electrum/advanced.rst:455
msgid ""
"The following command will export the private keys of all wallet "
"addresses that hold some Dash::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:460
msgid ""
"This will return a list of lists of private keys. In most cases, you want"
" to get a simple list. This can be done by adding a jq filer, as "
"follows::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:466
msgid ""
"Finally, let us use this list of private keys as input to the sweep "
"command::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:471
msgid "Using cold storage with the command line"
msgstr ""

#: ../../wallets/electrum/advanced.rst:473
msgid ""
"This section will show you how to sign a transaction with an offline Dash"
" Electrum wallet using the command line."
msgstr ""

#: ../../wallets/electrum/advanced.rst:479
msgid "With your online (watching-only) wallet, create an unsigned transaction::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:483
msgid ""
"The unsigned transaction is stored in a file named ‘unsigned.txn’. Note "
"that the –unsigned option is not needed if you use a watching-only "
"wallet."
msgstr ""

#: ../../wallets/electrum/advanced.rst:487
msgid "You may view it using::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:492
msgid "Sign the transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:494
msgid ""
"The serialization format of Dash Electrum contains the master public key "
"needed and key derivation used by the offline wallet to sign the "
"transaction. Thus we only need to pass the serialized transaction to the "
"offline wallet::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:501
msgid ""
"The command will ask for your password, and save the signed transaction "
"in ‘signed.txn’."
msgstr ""

#: ../../wallets/electrum/advanced.rst:504
msgid "Broadcast the transaction"
msgstr ""

#: ../../wallets/electrum/advanced.rst:506
msgid "Send your transaction to the Dash network, using broadcast::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:510
msgid "If successful, the command will return the ID of the transaction."
msgstr ""

#: ../../wallets/electrum/advanced.rst:513
msgid "How to accept Dash on a website using Dash Electrum"
msgstr ""

#: ../../wallets/electrum/advanced.rst:515
msgid ""
"This tutorial will show you how to accept dash on a website with SSL "
"signed payment requests. It is updated for Dash Electrum 2.6."
msgstr ""

#: ../../wallets/electrum/advanced.rst:519
msgid "Requirements"
msgstr ""

#: ../../wallets/electrum/advanced.rst:521
msgid "A webserver serving static HTML"
msgstr ""

#: ../../wallets/electrum/advanced.rst:522
msgid "A SSL certificate (signed by a CA)"
msgstr ""

#: ../../wallets/electrum/advanced.rst:523
msgid "Electrum version >= 2.6"
msgstr ""

#: ../../wallets/electrum/advanced.rst:526
msgid "Create a wallet"
msgstr ""

#: ../../wallets/electrum/advanced.rst:528
msgid "Create a wallet on your web server::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:532
msgid ""
"You can also use a watching only wallet (restored from xpub), if you want"
" to keep private keys off the server. Once your wallet is created, start "
"Dash Electrum as a daemon::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:539
msgid "Add your SSL certificate to your configuration"
msgstr ""

#: ../../wallets/electrum/advanced.rst:541
msgid ""
"You should have a private key and a public certificate for your domain. "
"Create a file that contains only the private key::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:548
msgid "Set the path to your the private key file with setconfig::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:552
msgid ""
"Create another file that contains your certificate and the list of "
"certificates it depends on, up to the root CA. Your certificate must be "
"at the top of the list, and the root CA at the end::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:566
msgid "Set the `ssl_chain` path with setconfig::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:571
msgid "Configure a requests directory"
msgstr ""

#: ../../wallets/electrum/advanced.rst:573
msgid "This directory must be served by your webserver (eg Apache)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:577
msgid ""
"By default, Dash Electrum will display local URLs, starting with "
"‘file://‘ In order to display public URLs, we need to set another "
"configuration variable, `url_rewrite`. For example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:584
msgid "Create a signed payment request"
msgstr ""

#: ../../wallets/electrum/advanced.rst:603
msgid "This command returns a json object with two URLs:"
msgstr ""

#: ../../wallets/electrum/advanced.rst:605
msgid "`request_url` is the URL of the signed BIP70 request."
msgstr ""

#: ../../wallets/electrum/advanced.rst:606
msgid "`index_url` is the URL of a webpage displaying the request."
msgstr ""

#: ../../wallets/electrum/advanced.rst:608
msgid ""
"Note that request_url and index_url use the domain name we defined in "
"`url_rewrite`. You can view the current list of requests using the "
"`listrequests` command."
msgstr ""

#: ../../wallets/electrum/advanced.rst:613
msgid "Open the payment request page in your browser"
msgstr ""

#: ../../wallets/electrum/advanced.rst:615
msgid "Let us open `index_url` in a web browser."
msgstr ""

#: ../../wallets/electrum/advanced.rst:620
msgid "Payment request page in a web browser"
msgstr ""

#: ../../wallets/electrum/advanced.rst:622
msgid ""
"The page shows the payment request. You can open the dash: URI with a "
"wallet, or scan the QR code. The bottom line displays the time remaining "
"until the request expires."
msgstr ""

#: ../../wallets/electrum/advanced.rst:629
msgid "Wallet awaiting payment"
msgstr ""

#: ../../wallets/electrum/advanced.rst:631
msgid ""
"This page can already be used to receive payments. However, it will not "
"detect that a request has been paid; for that we need to configure "
"websockets."
msgstr ""

#: ../../wallets/electrum/advanced.rst:636
msgid "Add web sockets support"
msgstr ""

#: ../../wallets/electrum/advanced.rst:638
msgid "Get SimpleWebSocketServer from here::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:642
msgid "Set `websocket_server` and `websocket_port` in your config::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:647
msgid "And restart the daemon::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:652
msgid ""
"Now, the page is fully interactive: it will update itself when the "
"payment is received. Please notice that higher ports might be blocked on "
"some client’s firewalls, so it is more safe for example to reverse proxy "
"websockets transmission using standard 443 port on an additional "
"subdomain."
msgstr ""

#: ../../wallets/electrum/advanced.rst:659
msgid "JSONRPC interface"
msgstr ""

#: ../../wallets/electrum/advanced.rst:661
msgid ""
"Commands to the Dash Electrum daemon can be sent using JSONRPC. This is "
"useful if you want to use Dash Electrum in a PHP script."
msgstr ""

#: ../../wallets/electrum/advanced.rst:664
msgid ""
"Note that the daemon uses a random port number by default. In order to "
"use a stable port number, you need to set the `rpcport` configuration "
"variable (and to restart the daemon)::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:670
msgid "With this setting, we can perform queries using curl or PHP. Example::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:674
msgid "Query with named parameters::"
msgstr ""

#: ../../wallets/electrum/advanced.rst:678
msgid "Create a payment request::"
msgstr ""

#~ msgid "Advanced Functions"
#~ msgstr ""

#~ msgid "Masternode Setup"
#~ msgstr ""

#~ msgid "IP Address and Protocol Version"
#~ msgstr ""

#~ msgid "Activating Your Masternode"
#~ msgstr ""

#~ msgid "Multisig Wallets"
#~ msgstr ""

#~ msgid "Sweep a Paper Wallet"
#~ msgstr ""

#~ msgid ""
#~ "You may have received a paper "
#~ "wallet as a gift from another Dash"
#~ " user, or previously stored one in"
#~ " a safe deposit box. Funds are "
#~ "swept from a :ref:`paper wallet "
#~ "<paper_wallets>` into a live wallet by"
#~ " importing its `private key "
#~ "<http://bitzuma.com/posts /six-things-bitcoin-"
#~ "users-should- know-about-private-keys/>`_,"
#~ " which is a long sequence of "
#~ "characters starting with the number "
#~ "\"7\" or the capital letter \"X\". "
#~ "The example below displays a private "
#~ "key (WIF format)."
#~ msgstr ""

#~ msgid "Cold Storage"
#~ msgstr ""

#~ msgid "Command Line"
#~ msgstr ""

#~ msgid "Magic Words"
#~ msgstr ""

#~ msgid ""
#~ "With both of the above methods, "
#~ "you can now add the seconds "
#~ "signature the the transaction (using the"
#~ " **Sign** button). It will then be"
#~ " broadcast to the network."
#~ msgstr ""

#~ msgid ""
#~ "Funds from paper wallets are swept "
#~ "into an Dash Electrum Wallet by "
#~ "creating a transaction using the private"
#~ " key and sending it to a new"
#~ " address from your wallet. This is"
#~ " necessary because it is not possible"
#~ " to add new public or private "
#~ "keys to an existing deterministic series"
#~ " of addresses derived from aa seed"
#~ " phrase."
#~ msgstr ""

