# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-09-03 08:53+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../developers/compiling.rst:1
msgid "Compile Dash Core using Linux, macOS and Gitian"
msgstr ""

#: ../../developers/compiling.rst:1
msgid "dash, build, compile, linux, Jenkins, macOS, binary, Gitian, developers"
msgstr ""

#: ../../developers/compiling.rst:9
msgid "Compiling Dash Core"
msgstr ""

#: ../../developers/compiling.rst:11
msgid ""
"While Dash offers stable binary builds on the `website "
"<https://www.dash.org/wallets>`_, on `GitHub "
"<https://github.com/dashpay/dash/releases>`_ and through development "
"builds using `Jenkins <https://jenkins.dash.org/>`_, many users will also"
" be interested in building Dash binaries for themselves. The following "
"guides are available:"
msgstr ""

#: ../../developers/compiling.rst:18
msgid ":ref:`Building on Linux <linux-build>`"
msgstr ""

#: ../../developers/compiling.rst:19
msgid ":ref:`Gitian deterministic builds <gitian-build>`"
msgstr ""

#: ../../developers/compiling.rst:24
msgid "Linux"
msgstr ""

#: ../../developers/compiling.rst:26
msgid ""
"This guide describes how to build Dash Core wallet without the GUI from "
"source under Ubuntu Linux. It is intended to serve as a simple guide for "
"general compilation of non-deterministic binary files from the stable "
"source code. A standard installation of Ubuntu Linux 16.04 LTS will be "
"used as an environment for the build. We assume you are running as a user"
" with sudo permissions. First add the necessary extra repository and "
"update all packages::"
msgstr ""

#: ../../developers/compiling.rst:38
msgid ""
"Now install the dependencies as described in the installation "
"documentation::"
msgstr ""

#: ../../developers/compiling.rst:44
msgid "Optionally install the Qt dependencies if you want to build the Dash GUI::"
msgstr ""

#: ../../developers/compiling.rst:49
msgid "Download the stable Dash repository::"
msgstr ""

#: ../../developers/compiling.rst:53
msgid "And build::"
msgstr ""

#: ../../developers/compiling.rst:61
msgid "``/usr/local/bin`` now contains the compiled Dash binaries."
msgstr ""

#: ../../developers/compiling.rst:65
msgid "macOS"
msgstr ""

#: ../../developers/compiling.rst:67
msgid ""
"This guide describes how to build Dash Core wallet from source under "
"macOS. It is intended to serve as a simple guide for general compilation "
"of non-deterministic binary files from the stable source code. A standard"
" installation of macOS 10.13 High Sierra will be used as an environment "
"for the build. We assume you are running as a user with sudo permissions."
" First, open a the **Terminal** app and enter the following command to "
"install the OS X command line tools::"
msgstr ""

#: ../../developers/compiling.rst:77
msgid ""
"When the popup appears, click **Install**. Then install `Homebrew "
"<https://brew.sh>`__::"
msgstr ""

#: ../../developers/compiling.rst:82
msgid "Install dependencies::"
msgstr ""

#: ../../developers/compiling.rst:86
msgid "Clone the Dash Core source code and change to the ``dash`` directory::"
msgstr ""

#: ../../developers/compiling.rst:91
msgid ""
"Build Dash Core. Configure and build the headless dash binaries as well "
"as the GUI (if Qt is found). You can disable the GUI build by passing "
"``--without-gui`` to configure::"
msgstr ""

#: ../../developers/compiling.rst:99
msgid "It is recommended to build and run the unit tests::"
msgstr ""

#: ../../developers/compiling.rst:103
msgid ""
"You can also create a ``.dmg`` that contains the ``.app`` bundle "
"(optional)::"
msgstr ""

#: ../../developers/compiling.rst:108
msgid "Dash Core is now available at ``./src/dashd``."
msgstr ""

#: ../../developers/compiling.rst:114
msgid "Gitian"
msgstr ""

#: ../../developers/compiling.rst:116
msgid ""
"Gitian is the deterministic build process that is used to build the Dash "
"Core executables. It provides a way to be reasonably sure that the "
"executables are really built from the source on GitHub. It also makes "
"sure that the same, tested dependencies are used and statically built "
"into the executable. Multiple developers build the source code by "
"following a specific descriptor (\"recipe\"), cryptographically sign the "
"result, and upload the resulting signature. These results are compared "
"and only if they match, the build is accepted and uploaded to dash.org."
msgstr ""

#: ../../developers/compiling.rst:125
msgid ""
"More independent Gitian builders are needed, which is why this guide "
"exists. It is preferred you follow these steps yourself instead of using "
"someone else's VM image to avoid 'contaminating' the build."
msgstr ""

#: ../../developers/compiling.rst:130
msgid "Setup the host environment"
msgstr ""

#: ../../developers/compiling.rst:132
msgid ""
"Gitian builds are known to be working on Debian 8.x. If your machine is "
"already running this system, you can perform Gitian builds on the actual "
"hardware. Alternatively, you can install it in a virtual machine. Follow "
"the guide for :ref:`setting up a VPS for masternodes <vps-setup>`, "
"selecting a Debian 8.x image during the installation process and naming "
"your non-root user ``gitianuser``. Selecting a VPS with two processors "
"will also greatly speed up the build process. If you cannot login to your"
" VPS over SSH as root, access the terminal and issue the following "
"command::"
msgstr ""

#: ../../developers/compiling.rst:145
msgid ""
"Log in to your new environment by SSH as root. Set up the dependencies "
"first by pasting the following in the terminal::"
msgstr ""

#: ../../developers/compiling.rst:151
msgid ""
"Then set up LXC and the rest with the following, which is a complex "
"jumble of settings and workarounds::"
msgstr ""

#: ../../developers/compiling.rst:172
msgid ""
"At the end Debian is rebooted to make sure that the changes take effect. "
"Re-login as the user gitianuser that was created during installation. The"
" rest of the steps in this guide will be performed as that user."
msgstr ""

#: ../../developers/compiling.rst:176
msgid ""
"There is no ``python-vm-builder`` package in Debian, so we need to "
"install it from source ourselves::"
msgstr ""

#: ../../developers/compiling.rst:188
msgid "Set up the environment and compile"
msgstr ""

#: ../../developers/compiling.rst:190
msgid "Clone the Dash Core repository to your home directory::"
msgstr ""

#: ../../developers/compiling.rst:194
msgid "Then create the script file::"
msgstr ""

#: ../../developers/compiling.rst:198
msgid ""
"And paste the following script in place (this will be automatic if/when "
"the script is pulled into Dash Core)::"
msgstr ""

#: ../../developers/compiling.rst:203
msgid "Save the file and set it executable::"
msgstr ""

#: ../../developers/compiling.rst:207
msgid ""
"Set up the environment, replacing the name and version with your name and"
" target version::"
msgstr ""

#: ../../developers/compiling.rst:212
msgid "Run the compilation script::"
msgstr ""

#: ../../developers/compiling.rst:216
msgid ""
"Your system will build all dependencies and Dash Core from scratch for "
"Windows and Linux platforms (macOS if the dependencies were installed "
"according to `these instructions "
"<https://github.com/dashpay/dash/blob/master/doc/build-osx.md>`_). This "
"can take some time. When complete, you will see the SHA256 checksums, "
"which you can compare against the hashes available on the `Dash website "
"<https://www.dash.org/wallets>`_. In this way, you can be sure that you "
"are running original and untampered builds of the code as it exists on "
"GitHub."
msgstr ""

#~ msgid ""
#~ "This guide describes how to build "
#~ "Dash Core wallet without the GUI "
#~ "from source under Ubuntu Linux. It "
#~ "is intended to serve as a simple"
#~ " guide for general compilation of "
#~ "non-deterministic binary files from the "
#~ "stable source code. A standard "
#~ "installation of Ubuntu Linux 16.04 LTS"
#~ " running on a VPS will be used"
#~ " as an environment for the build. "
#~ "We assume you are running as root."
#~ " First add the necessary extra "
#~ "repository and update all packages::"
#~ msgstr ""

#~ msgid ""
#~ "While Dash offers stable binary builds"
#~ " on the `website "
#~ "<https://www.dash.org/wallets>`_, on `Github "
#~ "<https://github.com/dashpay/dash/releases>`_ and through"
#~ " development builds using `Bamboo "
#~ "<https://bamboo.dash.org>`_, many users will "
#~ "also be interested in building Dash "
#~ "binaries for themselves. The following "
#~ "guides are available:"
#~ msgstr ""

#~ msgid ""
#~ "Gitian builds are known to be "
#~ "working on Debian 8.x. If your "
#~ "machine is already running this sytem,"
#~ " you can perform Gitian builds on "
#~ "the actual hardware. Alternatively, you "
#~ "can install it in a virtual "
#~ "machine. Follow the guide for "
#~ ":ref:`setting up a VPS for masternodes"
#~ " <vps-setup>`, selecting a Debian 8.x"
#~ " image during the installation process "
#~ "and naming your non-root user "
#~ "``gitianuser``. Selecting a VPS with two"
#~ " processors will also greatly speed "
#~ "up the build process. If you "
#~ "cannot login to your VPS over SSH"
#~ " as root, access the terminal and "
#~ "issue the following command::"
#~ msgstr ""

#~ msgid ""
#~ "Your system will build all dependencies"
#~ " and Dash Core from scratch for "
#~ "Windows and Linux platforms (macOS if"
#~ " the dependencies were installed according"
#~ " to `these instructions "
#~ "<https://github.com/dashpay/dash/blob/master/doc/build-"
#~ "osx.md>`_). This can take some time. "
#~ "When complete, you will see the "
#~ "SHA256 checksums, which you can compare"
#~ " against the hashes available on the"
#~ " `Dash website <https://www.dash.org/wallets>`_. "
#~ "In this way, you can be sure "
#~ "that you are running original and "
#~ "untampered builds of the code as "
#~ "it exists on Github."
#~ msgstr ""

#~ msgid ""
#~ "While Dash offers stable binary builds"
#~ " on the `website "
#~ "<https://www.dash.org/wallets>`_, on `GitHub "
#~ "<https://github.com/dashpay/dash/releases>`_ and through"
#~ " development builds using `Bamboo "
#~ "<https://bamboo.dash.org>`_, many users will "
#~ "also be interested in building Dash "
#~ "binaries for themselves. The following "
#~ "guides are available:"
#~ msgstr ""

#~ msgid "Eclipse (coming soon)"
#~ msgstr ""

