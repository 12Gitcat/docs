# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Alex.ys <silvershark.ys@gmail.com>, 2019
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-15 06:00+0000\n"
"PO-Revision-Date: 2019-04-08 11:33+0000\n"
"Last-Translator: Alex.ys <silvershark.ys@gmail.com>, 2019\n"
"Language-Team: Chinese (China) (https://www.transifex.com/dash/teams/37570/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../developers/integration.rst:1
msgid "Technical guides for merchants using Dash. API and SDK resources."
msgstr "达世币及其应用程序接口和软件开发工具包的技术指南"

#: ../../developers/integration.rst:1
msgid ""
"dash, merchants, payment processor, API, SDK, insight, blockcypher, gocoin, "
"instantsend, python, .NET, java, javascript, nodejs, php, objective-c, "
"vending machines"
msgstr ""

#: ../../developers/integration.rst:9
msgid "Integration Overview"
msgstr ""

#: ../../developers/integration.rst:11
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Dash_v0.13_IntegrationOverview.pdf>`__."
msgstr ""

#: ../../developers/integration.rst:13
msgid ""
"Dash Core `v0.13.x <https://github.com/dashpay/dash/releases>`__ is a “fork”"
" of Bitcoin and shares many common functionalities. Key differences relate "
"to existing JSON-RPC commands which have been customized to support unique "
"functionalities such as InstantSend."
msgstr ""

#: ../../developers/integration.rst:18
msgid ""
"**General Information:** Dash is a “Proof of Work” network and is similar to"
" Bitcoin."
msgstr ""

#: ../../developers/integration.rst:21
msgid "Block Time: ~2.6 Minutes per Block"
msgstr "区块时间: 每 ~2.6 分钟产生一个区块"

#: ../../developers/integration.rst:22
msgid "Github Source: https://github.com/dashpay/dash"
msgstr "Github 源代码: https://github.com/dashpay/dash"

#: ../../developers/integration.rst:23
msgid "Latest Release: https://github.com/dashpay/dash/releases"
msgstr ""

#: ../../developers/integration.rst:25
msgid ""
"**JSON-RPC Interface:** The majority of commands are unchanged from Bitcoin "
"making integration into existing systems relatively straightforward. Note "
"that the following commands have been modified to support InstantSend:"
msgstr ""

#: ../../developers/integration.rst:30 ../../developers/integration.rst:191
msgid ""
"`getrawmempool <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:31
msgid ""
"`getmempoolancestors <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:32
msgid ""
"`getmempooldescendants <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:33
msgid ""
"`getmempoolentry <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:34
msgid ""
"`getrawtransaction <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:35
msgid ""
"`decoderawtransaction <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:36
msgid ""
"`gettransaction <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:37
msgid ""
"`listtransactions <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:38
msgid ""
"`listsinceblock <https://dash-docs.github.io/en/developer-"
"reference#getrawmempool>`__"
msgstr ""

#: ../../developers/integration.rst:40
msgid ""
"**Block Hashing Algorithm:** Dash uses the “X11” algorithm in place of "
"SHA256 used in Bitcoin. It’s important to note, however, that this only "
"affects the hashing of the Block itself. All other internals utilize SHA256 "
"hashes (transactions, merkle root, etc) which allows for most existing "
"libraries to work in the Dash ecosystem."
msgstr ""

#: ../../developers/integration.rst:46
msgid ""
"**Special Transactions:** Dash Core v0.13.x introduces the concept of "
"“Special Transactions”. Please see the `Transaction Type Integration Guide "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Integration-"
"Resources-Dash-v0.13.0-Transaction-Types.pdf>`__ for more information."
msgstr ""

#: ../../developers/integration.rst:54
msgid "v0.13.0 Integration Notes"
msgstr ""

#: ../../developers/integration.rst:56
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Integration-"
"Resources-Dash-v0.13.0-Transaction-Types.pdf>`__."
msgstr ""

#: ../../developers/integration.rst:58
msgid ""
"Dash 0.13.0 implements `DIP002 Special Transactions "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md>`__, which form a "
"basis for new transaction types that provide on-chain metadata to assist "
"various consensus mechanisms. The following special transaction types exist:"
msgstr ""

#: ../../developers/integration.rst:64
msgid "Release"
msgstr ""

#: ../../developers/integration.rst:64
msgid "Version"
msgstr "版本"

#: ../../developers/integration.rst:64
msgid "Type"
msgstr ""

#: ../../developers/integration.rst:64
msgid "Payload Size"
msgstr ""

#: ../../developers/integration.rst:64
msgid "Payload"
msgstr ""

#: ../../developers/integration.rst:64
msgid "Payload JSON"
msgstr ""

#: ../../developers/integration.rst:64
msgid "Transaction Purpose"
msgstr ""

#: ../../developers/integration.rst:66 ../../developers/integration.rst:68
#: ../../developers/integration.rst:70 ../../developers/integration.rst:72
#: ../../developers/integration.rst:74 ../../developers/integration.rst:76
#: ../../developers/integration.rst:78
msgid "v0.13.0"
msgstr ""

#: ../../developers/integration.rst:66 ../../developers/integration.rst:68
#: ../../developers/integration.rst:70 ../../developers/integration.rst:72
#: ../../developers/integration.rst:72 ../../developers/integration.rst:74
#: ../../developers/integration.rst:76 ../../developers/integration.rst:78
msgid "3"
msgstr "3"

#: ../../developers/integration.rst:66
msgid "0"
msgstr ""

#: ../../developers/integration.rst:66 ../../developers/integration.rst:66
#: ../../developers/integration.rst:66
msgid "n/a"
msgstr ""

#: ../../developers/integration.rst:66
msgid "Standard Transaction"
msgstr ""

#: ../../developers/integration.rst:68
msgid "1"
msgstr "1"

#: ../../developers/integration.rst:68 ../../developers/integration.rst:70
#: ../../developers/integration.rst:72 ../../developers/integration.rst:74
#: ../../developers/integration.rst:76 ../../developers/integration.rst:78
msgid "<variable int>"
msgstr ""

#: ../../developers/integration.rst:68 ../../developers/integration.rst:70
#: ../../developers/integration.rst:72 ../../developers/integration.rst:74
#: ../../developers/integration.rst:76 ../../developers/integration.rst:78
msgid "<hex>"
msgstr ""

#: ../../developers/integration.rst:68
msgid "proRegTx"
msgstr ""

#: ../../developers/integration.rst:68
msgid ""
"`Masternode Registration <https://dash-docs.github.io/en/developer-"
"reference#proregtx>`__"
msgstr ""

#: ../../developers/integration.rst:70
msgid "2"
msgstr "2"

#: ../../developers/integration.rst:70
msgid "proUpServTx"
msgstr ""

#: ../../developers/integration.rst:70
msgid ""
"`Update Masternode Service <https://dash-docs.github.io/en/developer-"
"reference#proupservtx>`__"
msgstr ""

#: ../../developers/integration.rst:72
msgid "proUpRegTx"
msgstr ""

#: ../../developers/integration.rst:72
msgid ""
"`Update Masternode Operator <https://dash-docs.github.io/en/developer-"
"reference#proupregtx>`__"
msgstr ""

#: ../../developers/integration.rst:74
msgid "4"
msgstr "4"

#: ../../developers/integration.rst:74
msgid "proUpRevTx"
msgstr ""

#: ../../developers/integration.rst:74
msgid ""
"`Masternode Revocation <https://dash-docs.github.io/en/developer-"
"reference#prouprevtx>`__"
msgstr ""

#: ../../developers/integration.rst:76
msgid "5"
msgstr ""

#: ../../developers/integration.rst:76
msgid "cbTx"
msgstr ""

#: ../../developers/integration.rst:76
msgid ""
"`Masternode List Merkle Proof <https://dash-docs.github.io/en/developer-"
"reference#cbtx>`__"
msgstr ""

#: ../../developers/integration.rst:78
msgid "6"
msgstr "6"

#: ../../developers/integration.rst:78
msgid "qcTx"
msgstr ""

#: ../../developers/integration.rst:78
msgid ""
"`Quorum Commitment <https://dash-docs.github.io/en/developer-"
"reference#qctx>`__"
msgstr ""

#: ../../developers/integration.rst:81
msgid "Integration notes:"
msgstr ""

#: ../../developers/integration.rst:83
msgid ""
"`DIP002 Special Transactions "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md>`__ are a "
"foundational component of Dash Core v0.13.0 and introduce a new Transaction "
"Version and related “Payload” to the network."
msgstr ""

#: ../../developers/integration.rst:87
msgid ""
"Integrated Systems must be able to `serialize and deserialize "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md#serialization-"
"hashing-and-signing>`__ these new Transaction Types in order to accurately "
"encode and decode Raw Transaction data."
msgstr ""

#: ../../developers/integration.rst:91
msgid ""
"From a `backwards compatibility "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md#compatibility>`__ "
"perspective, the 4 byte (32-bit) ``version`` field included in Legacy "
"Transactions has been split into two fields: ``version`` and ``type`` (each "
"consisting of 2 bytes)."
msgstr ""

#: ../../developers/integration.rst:96
msgid ""
"Refer to the `Special Transactions <https://dash-docs.github.io/en"
"/developer-reference#special-transactions>`__ section of the dash developer "
"reference for additional detail on these data types, e.g. <variable int>."
msgstr ""

#: ../../developers/integration.rst:100
msgid ""
"`InstantSend "
"<https://docs.dash.org/en/latest/integration/technical.html#instantsend>`__ "
"status and Payload JSON (e.g. ``proRegTx``) is included in the JSON-RPC "
"response, please note that this data is not part of the calculated hash and "
"is provided for convenience."
msgstr ""

#: ../../developers/integration.rst:105
msgid ""
"See the `v0.13.0 transaction types integration documentation (PDF) "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Integration-"
"Resources-Dash-v0.13.0-Transaction-Types.pdf>`__ for worked examples of each"
" transaction type."
msgstr ""

#: ../../developers/integration.rst:112
msgid "InstantSend Overview"
msgstr ""

#: ../../developers/integration.rst:114
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Dash_v0.13_InstantSend.pdf>`__."
msgstr ""

#: ../../developers/integration.rst:116
msgid ""
"InstantSend is a feature provided by the Dash network that allows for zero-"
"confirmation transactions to be safely accepted by Merchants and other "
"service providers. All InstantSend Transactions are secured for 25 blocks by"
" the “Masternode Network” at the moment of broadcast. The transaction is "
"mined into the next block in accordance with standard blockchain principles."
msgstr ""

#: ../../developers/integration.rst:123
msgid ""
"InstantSend is enabled by the Masternode Network which comprises "
"approximately 4,800 masternode servers. These nodes are differentiated from "
"standard nodes by having proven ownership of 1,000 Dash. One responsibility "
"that is appointed to this special type of server is to perform \"Transaction"
" Locking\", also known as InstantSend."
msgstr ""

#: ../../developers/integration.rst:129
msgid ""
"This concept works as an extension to network consensus. When an "
"\"InstantSend\" transaction occurs the network goes through an extra "
"validation process which examines the following two properties of the "
"transaction:"
msgstr ""

#: ../../developers/integration.rst:134
msgid ""
"**Input Maturity:** the network will require all inputs to have at least 6 "
"confirmations."
msgstr ""

#: ../../developers/integration.rst:137
msgid ""
"**Input Composition:** the number of inputs in use dictates fee "
"requirements."
msgstr ""

#: ../../developers/integration.rst:140
msgid ""
"**1 - 4 inputs:** per-kB fee of 0.00001 DASH using Automatic InstantSend."
msgstr ""

#: ../../developers/integration.rst:142
msgid "**5+ inputs:** per-input fee of 0.0001 DASH is required."
msgstr ""

#: ../../developers/integration.rst:144
msgid ""
"Assuming the **Input Maturity** and **Input Composition** requirements are "
"met, the network will \"lock\" the inputs related to this transaction for 25"
" blocks. Transactions carrying 4 or fewer inputs are referred to as a "
"“simple transaction” and carry no extra fee."
msgstr ""

#: ../../developers/integration.rst:151
msgid "Automatic InstantSend"
msgstr ""

#: ../../developers/integration.rst:153
msgid ""
"Dash Core v0.13.x introduces the process of Automatic InstantSend. Any "
"transaction which is classified as a “simple transaction” will automatically"
" be broadcast as an InstantSend transaction when using standard transaction "
"broadcast endpoints."
msgstr ""

#: ../../developers/integration.rst:159
msgid "InstantSend vs. Standard Transactions"
msgstr ""

#: ../../developers/integration.rst:161
msgid ""
"The term “InstantSend” is used to describe a standard transaction that has "
"been provided additional assurances by the Masternode Network. As a result, "
"and from an integration perspective, there is no technical difference "
"between the two types of transactions."
msgstr ""

#: ../../developers/integration.rst:166
msgid ""
"The most notable difference relates to the way that confirmation policy is "
"applied within an integrated system. The receiving system must be aware of "
"InstantSend Status in order to safely apply transaction confirmation "
"policies that are enabled using this technology."
msgstr ""

#: ../../developers/integration.rst:172
msgid "Receiving InstantSend Transactions"
msgstr "接收即时发送交易"

#: ../../developers/integration.rst:174
msgid "Receiving an InstantSend Transaction introduces two requirements:"
msgstr ""

#: ../../developers/integration.rst:176
msgid ""
"The ability to determine the “InstantSend Status” of a given transaction."
msgstr ""

#: ../../developers/integration.rst:179
msgid ""
"The ability to adjust “Confirmation Status” independently of block "
"confirmation."
msgstr ""

#: ../../developers/integration.rst:182
msgid ""
"InstantSend Status is typically determined through direct connection with "
"the dash daemon, `ZMQ notification "
"<https://github.com/dashpay/dash/blob/master/doc/instantsend.md#zmq>`__, or "
"through the usage of an external wallet notification script."
msgstr ""

#: ../../developers/integration.rst:186
msgid ""
"**Direct Connection:** InstantSend Status can be identified through direct "
"connection with the Dash daemon using JSON-RPC protocol. The “instantlock” "
"attribute of the JSON response reflects the status of the transaction and is"
" included in the following commands:"
msgstr ""

#: ../../developers/integration.rst:192
msgid ""
"`getmempoolancestors <https://dash-docs.github.io/en/developer-"
"reference#getmempoolancestors>`__"
msgstr ""

#: ../../developers/integration.rst:193
msgid ""
"`getmempooldescendants <https://dash-docs.github.io/en/developer-"
"reference#getmempooldescendants>`__"
msgstr ""

#: ../../developers/integration.rst:194
msgid ""
"`getmempoolentry <https://dash-docs.github.io/en/developer-"
"reference#getmempoolentry>`__"
msgstr ""

#: ../../developers/integration.rst:195
msgid ""
"`getrawtransaction <https://dash-docs.github.io/en/developer-"
"reference#getrawtransaction>`__"
msgstr ""

#: ../../developers/integration.rst:196
msgid ""
"`decoderawtransaction <https://dash-docs.github.io/en/developer-"
"reference#decoderawtransaction>`__"
msgstr ""

#: ../../developers/integration.rst:197
msgid ""
"`gettransaction <https://dash-docs.github.io/en/developer-"
"reference#gettransaction>`__"
msgstr ""

#: ../../developers/integration.rst:198
msgid ""
"`listtransactions <https://dash-docs.github.io/en/developer-"
"reference#listtransactions>`__"
msgstr ""

#: ../../developers/integration.rst:199
msgid ""
"`listsinceblock <https://dash-docs.github.io/en/developer-"
"reference#listsinceblock>`__"
msgstr ""

#: ../../developers/integration.rst:201
msgid ""
"**Wallet Notification:** The Dash Core Daemon can be configured to execute "
"an external script whenever an InstantSend transaction relating to that "
"wallet is observed. This is configured by adding the following line to the "
"dash.conf file::"
msgstr ""

#: ../../developers/integration.rst:208
msgid ""
"This is typically used with a wallet that has been populated with `watch-"
"only <https://dash-docs.github.io/en/glossary/watch-only-address>`__ "
"addresses."
msgstr ""

#: ../../developers/integration.rst:213
msgid "Broadcasting InstantSend Transactions"
msgstr "广播即时发送功能的交易信息"

#: ../../developers/integration.rst:215
msgid ""
"Automatic InstantSend introduces two requirements into the system being "
"integrated:"
msgstr ""

#: ../../developers/integration.rst:218
msgid "The ability to evaluate the number of inputs in a given transaction."
msgstr ""

#: ../../developers/integration.rst:220
msgid "The ability to apply an increased fee-level in cases of 5+ inputs."
msgstr ""

#: ../../developers/integration.rst:222
msgid ""
"In many cases an integrated system will already contain logic intended to "
"keep transaction fees to a minimum by optimizing input usage. If this is "
"true, and it can be assumed that only “simple transactions” are being "
"formed, no additional development effort is required."
msgstr ""

#: ../../developers/integration.rst:227
msgid ""
"In cases where this is not possible or will be unknown, the integrated "
"system should be able to calculate a fee based on the number of inputs being"
" used to form the transaction. This per-input fee of 0.0001 DASH must be "
"applied in order for the transaction to be successfully broadcast as an "
"InstantSend. In these cases, it’s important to note that the “instantsend” "
"flag must be set as “true” when issuing the `sendrawtransaction <https"
"://dash-docs.github.io/en/developer-reference#sendrawtransaction>`__ "
"command, e.g.::"
msgstr ""

#: ../../developers/integration.rst:239
msgid "Additional Resources"
msgstr "其它资源"

#: ../../developers/integration.rst:241
msgid ""
"The following resources provide additional information about InstantSend and"
" are intended to help provide a more complete understanding of the "
"underlying technologies."
msgstr "下列资源提供即时发送功能的更多信息，以便帮助用户全面地了解它的基础技术。"

#: ../../developers/integration.rst:245
msgid ""
"`InstantSend Whitepaper "
"<https://dashpay.atlassian.net/wiki/download/attachments/75530298/Dash%20Whitepaper%20-%20InstantTX.pdf>`_"
msgstr ""
"`即时发送白皮书 "
"<https://dashpay.atlassian.net/wiki/download/attachments/75530298/Dash%20Whitepaper%20-%20InstantTX.pdf>`_"

#: ../../developers/integration.rst:246
msgid ""
"`InstantSend Technical Information "
"<https://github.com/dashpay/dash/blob/master/doc/instantsend.md#zmq>`__"
msgstr ""

#: ../../developers/integration.rst:247
msgid ""
"`InstantSend Developer Documentation <https://dash-"
"docs.github.io/en/glossary/instantsend>`__"
msgstr ""

#: ../../developers/integration.rst:248
msgid ""
"`Product Brief: Dash Core v0.13 Release <https://blog.dash.org/product-"
"brief-dash-core-release-v0-13-0-5d7fddffb7ef>`__"
msgstr ""

#: ../../developers/integration.rst:254
msgid "API Services"
msgstr "API 服务"

#: ../../developers/integration.rst:256
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Integration-"
"Resources-API.pdf>`__."
msgstr ""

#: ../../developers/integration.rst:258
msgid ""
"Several API services exist to facilitate quick and easy integration with the"
" Dash network for services including:"
msgstr "现有的多种应用程序接口服务可以帮助用户轻松、快捷地享受达世币网络的各项服务，其中包括："

#: ../../developers/integration.rst:261
msgid "Transaction broadcasting"
msgstr "交易广播"

#: ../../developers/integration.rst:262
msgid "Exchange rates"
msgstr "汇率"

#: ../../developers/integration.rst:263
msgid "Currency conversion"
msgstr "货币兑换"

#: ../../developers/integration.rst:264
msgid "Invoice generation"
msgstr "发票生成"

#: ../../developers/integration.rst:266
msgid ""
"API Services are typically leveraged to eliminate that requirement of "
"running your own infrastructure to support blockchain interactions. This "
"includes mechanisms such as:"
msgstr "应用程序接口的意义在于它可以免除用户为实现区块链交互而运行基础设施的麻烦。其中涉及的机制和流程包括："

#: ../../developers/integration.rst:270
msgid "Forming and Broadcasting a Transaction to the network."
msgstr "向达世币网络公告交易信息。"

#: ../../developers/integration.rst:271
msgid "Address generation using HD Wallets."
msgstr "通过HD钱包生成地址。"

#: ../../developers/integration.rst:272
msgid "Payment Processing using WebHooks."
msgstr "通过WebHooks处理支付。"

#: ../../developers/integration.rst:274
msgid ""
"There are a variety of options for supporting these methods, with the key "
"differentiator being the pricing model included and supported features. The "
"following list of API Providers attempts to outline these key "
"features/differentiators and also includes a link to related documentation."
msgstr "以定价模式和支持的功能为区分标准，市面上可供使用的设备有很多。下表罗列了常见的应用程序接口供应商、主打产品的性能和相关说明文档的链接。"

#: ../../developers/integration.rst:282
msgid "Insight"
msgstr "Insight"

#: ../../developers/integration.rst:289
msgid "https://github.com/dashevo/insight-api"
msgstr "https://github.com/dashevo/insight-api"

#: ../../developers/integration.rst:291
msgid ""
"The open-source Insight REST API provides you with a convenient, powerful "
"and simple way to read data from the Dash network and build your own "
"services with it. A practical guide to getting started with the Insight API "
"and Insight UI block explorer is available :ref:`here <insight-api>`."
msgstr ""

#: ../../developers/integration.rst:297
msgid "Features: Transaction Broadcast, WebSocket Notifications."
msgstr "功能：交易的广播和WebSocket通知。"

#: ../../developers/integration.rst:298
msgid "Pricing Model: Free / Open Source"
msgstr "定价：免费/开源"

#: ../../developers/integration.rst:299
msgid "Documentation: https://github.com/dashevo/insight-api"
msgstr "说明文档的链接: https://github.com/dashevo/insight-api"

#: ../../developers/integration.rst:303 ../../developers/integration.rst:552
msgid "BlockCypher"
msgstr "BlockCypher"

#: ../../developers/integration.rst:310 ../../developers/integration.rst:559
msgid "https://www.blockcypher.com"
msgstr "https://www.blockcypher.com"

#: ../../developers/integration.rst:312
msgid ""
"BlockCypher is a simple, mostly RESTful JSON API for interacting with "
"blockchains, accessed over HTTP or HTTPS from the api.blockcypher.com "
"domain."
msgstr ""
"BlockCypher是简单实用的JSON应用程序接口，可实现与区块链的交互，还可以借助HTTP或HTTPS在api.blockcypher.com域名上进行访问。"

#: ../../developers/integration.rst:316
msgid ""
"Features: Transaction Broadcast, HD Wallet / Address Generation, WebSocket "
"and WebHook Callbacks as well as Payment Forwarding. BlockCypher does not "
"handle Private Keys."
msgstr ""
"功能：交易的广播、HD钱包及地址的生成、WebSocket和WebHook的回调，以及交易的推送。BlockCypher不处理私钥的相关事务。"

#: ../../developers/integration.rst:319
msgid ""
"Pricing Model: Per API Call, 5000 Requests -> $85.00 per month "
"(https://accounts.blockcypher.com/plans)"
msgstr ""
"定价：按次数收费，每5000次请求 -> 约花费85.00美元 (https://accounts.blockcypher.com/plans)。"

#: ../../developers/integration.rst:321
msgid "Documentation: https://www.blockcypher.com/dev/dash/"
msgstr "说明文档的链接: https://www.blockcypher.com/dev/dash/"

#: ../../developers/integration.rst:325
msgid "BitGo"
msgstr ""

#: ../../developers/integration.rst:332
msgid "https://www.bitgo.com"
msgstr ""

#: ../../developers/integration.rst:334
msgid ""
"BitGo provides a simple and robust RESTful API and client SDK to integrate "
"digital currency wallets with your application. Support for Dash InstantSend"
" is available."
msgstr ""

#: ../../developers/integration.rst:338
msgid ""
"Features: Multi-Signature HD Wallets, Wallet Operations, WebSocket and "
"WebHook Notifications, Custody Solutions"
msgstr ""

#: ../../developers/integration.rst:340
msgid "Pricing Model: Per API Call"
msgstr ""

#: ../../developers/integration.rst:341
msgid "Documentation: https://www.bitgo.com/api/v2/"
msgstr ""

#: ../../developers/integration.rst:344
msgid "ChainRider"
msgstr "ChainRider"

#: ../../developers/integration.rst:351
msgid "https://www.chainrider.io"
msgstr "https://www.chainrider.io"

#: ../../developers/integration.rst:353
msgid ""
"ChainRider is a cloud service providing a set of REST APIs for digital "
"currency management and exploration."
msgstr "ChainRider是云服务平台，为数字货币的管理和探究提供一套REST应用程序接口。"

#: ../../developers/integration.rst:356
msgid ""
"Features: Blockchain queries, Event Notifications, Transaction Broadcast, "
"Payment Processing, etc."
msgstr "功能：区块链询问，事件通知，交易广播，支付处理，等。"

#: ../../developers/integration.rst:358
msgid "Pricing Model: Free trial, pay per API call"
msgstr "定价：免费试用，每次API调用时付费"

#: ../../developers/integration.rst:359
msgid "Documentation: https://www.chainrider.io/docs/dash"
msgstr "说明文档的链接: https://www.chainrider.io/docs/dash"

#: ../../developers/integration.rst:363 ../../developers/integration.rst:567
msgid "GoCoin"
msgstr "GoCoin"

#: ../../developers/integration.rst:370 ../../developers/integration.rst:574
msgid "https://gocoin.com"
msgstr "https://gocoin.com"

#: ../../developers/integration.rst:372
msgid ""
"The GoCoin platform makes taking Dash as easy as installing a plugin. "
"Payment processing is already implemented for every major shopping platform."
" GoCoin is focused on helping merchants in privacy-related niches and "
"specific industries, and handles all transaction risk for all payments from "
"your customers."
msgstr ""
"在GoCoin平台的帮助下，达世币的集成就和插件安装一样简单。它为各大交易平台提供便捷的支付处理，侧重为隐私保护等特定的小众行业提供服务，并帮助他们规避来自所有客户的交易风险。"

#: ../../developers/integration.rst:378
msgid ""
"Features: Invoicing, Exchange Rates, WebHook Callbacks. GoCoin holds Private"
" Keys on their server allowing the merchant to withdraw funds in "
"Cryptocurrency or convert to Fiat."
msgstr ""
"功能：发票生成、汇率及WebHook回调。GoCoin在其服务器上保存私钥，帮助商家以加密数字货币的形式提款或实现加密数字货币与法定货币间的兑换。"

#: ../../developers/integration.rst:381
msgid ""
"Integrations: WooCommerce, Magento, Prestashop, VirtueMart, ZenCart, "
"OpenCart, OSCommerce, UberCart, nopCommerce, WHMCS, NATS4, Shopify."
msgstr ""
"合作商：WooCommerce、Magento, Prestashop、VirtueMart、ZenCart、OpenCart、OSCommerce、 "
"UberCart、nopCommerce、WHMCS、NATS4和Shopify。"

#: ../../developers/integration.rst:383
msgid "Pricing Model: 1% Processing Fee (https://gocoin.com/fees)"
msgstr "定价：收取1%的交易费用(https://gocoin.com/fees)"

#: ../../developers/integration.rst:384
msgid "Documentation: https://gocoin.com/docs"
msgstr "说明文档的链接: https://gocoin.com/docs"

#: ../../developers/integration.rst:388
msgid "CoinPayments"
msgstr "CoinPayments"

#: ../../developers/integration.rst:395
msgid "https://www.coinpayments.net"
msgstr "https://www.coinpayments.net"

#: ../../developers/integration.rst:397
msgid ""
"CoinPayments is an integrated payment gateway for cryptocurrencies such as "
"Dash. Shopping cart plugins are available for all popular webcarts used "
"today. CoinPayments can help you set up a new checkout, or integrate with "
"your pre-existing checkout."
msgstr ""
"CoinPayments是适用于达世币等加密数字货币的集成支付网关。它为当前流行的所有webcarts提供购物车插件，还可以帮助用户设置新的结帐页面或合并之前的结帐页面。"

#: ../../developers/integration.rst:402
msgid ""
"Features: Invoicing, Exchange Rates, WebHook Callbacks. CoinPayments holds "
"Private Keys on their server allowing merchant to withdraw funds in "
"Cryptocurrency or convert to Fiat."
msgstr ""
"功能：发票生成、汇率及WebHook回调。CoinPayments在其服务器上保存私钥，帮助商家以加密数字货币的形式提款或实现加密数字货币与法定货币间的兑换。"

#: ../../developers/integration.rst:405
msgid ""
"Integrations: aMember Pro, Arastta, Blesta, BoxBilling, Drupal, Ecwid, "
"Hikashop, Magento, OpenCart, OSCommerce, PrestaShop, Tomato Cart, "
"WooCommerce, Ubercart, XCart, ZenCart"
msgstr ""
"合作商：aMember "
"Pro、Arastta、Blesta、BoxBilling、Drupal、Ecwid、Hikashop、Magento、OpenCart、OSCommerce、PrestaShop、Tomato"
" Cart、WooCommerce、Ubercart、XCart及ZenCart"

#: ../../developers/integration.rst:408
msgid ""
"Pricing Model: 0.5% Processing Fee (https://www.coinpayments.net/help-fees)"
msgstr "定价：收取0.5%的交易费用(https://www.coinpayments.net/help-fees)"

#: ../../developers/integration.rst:410
msgid "Documentation: https://www.coinpayments.net/apidoc"
msgstr "说明文档的链接: https://www.coinpayments.net/apidoc"

#: ../../developers/integration.rst:416
msgid "SDK Resources"
msgstr "软件开发工具包资源"

#: ../../developers/integration.rst:418
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Integration-"
"Resources-SDK.pdf>`__."
msgstr ""

#: ../../developers/integration.rst:420
msgid ""
"SDKs (Software Development Kits) are used to accelerate the design and "
"development of a product for the Dash Network. These resources can either be"
" used to interface with an API provider or for the creation of standalone "
"applications by forming transactions and/or performing various wallet "
"functions."
msgstr ""

#: ../../developers/integration.rst:428
msgid "Dash Developer Guide"
msgstr "达世币研发者指南"

#: ../../developers/integration.rst:435
msgid "https://dash-docs.github.io/en/developer-guide"
msgstr "https://dash-docs.github.io/en/developer-guide"

#: ../../developers/integration.rst:437
msgid ""
"The Dash Developer Guide aims to provide the information you need to "
"understand Dash and start building Dash-based applications. To make the best"
" use of this documentation, you may want to install the current version of "
"Dash Core, either from source or from a pre-compiled executable."
msgstr ""
"达世币研发者指南致力于为读者提供达世币的相关信息，并帮助他们创建以达世币为基础的应用程序。为了充分发挥这份指南的作用，用户需要通过源代码或预编译的可执行文件安装Dash"
" Core钱包的最新版本。"

#: ../../developers/integration.rst:443
msgid "Documentation: https://dash-docs.github.io/en/developer-guide"
msgstr "说明文档的链接： https://dash-docs.github.io/en/developer-guide"

#: ../../developers/integration.rst:446
msgid "NodeJS/JavaScript: Dashcore"
msgstr ""

#: ../../developers/integration.rst:453
msgid "https://bitcore.io"
msgstr "https://bitcore.io"

#: ../../developers/integration.rst:455
msgid ""
"Dashcore is a fork of Bitcore and operates as a full Dash node — your apps "
"run directly on the peer-to-peer network. For wallet application "
"development, additional indexes have been added into Dash for querying "
"address balances, transaction history, and unspent outputs."
msgstr ""
"Dashcore是Bitcore的一个分叉。它以一个达世币全节点的方式运行 — "
"也就是说，应用程序将在P2P网络上直接运行。对于钱包应用的开发来说，研发者需要增加额外的索引，以便查询地址余额、交易历史记录和未经支出的额度。"

#: ../../developers/integration.rst:460
msgid "Platform: NodeJS / Javascript"
msgstr "平台：NodeJS或Javascript"

#: ../../developers/integration.rst:461
msgid "Documentation: https://bitcore.io/api/lib"
msgstr "说明文档的链接：https://bitcore.io/api/lib"

#: ../../developers/integration.rst:462
msgid "Repository lib: https://github.com/dashevo/dashcore-lib"
msgstr "存储库：https://github.com/dashevo/dashcore-lib"

#: ../../developers/integration.rst:463
msgid "Repository node: https://github.com/dashevo/dashcore-node"
msgstr "存储节点：https://github.com/dashevo/dashcore-node"

#: ../../developers/integration.rst:464
msgid "See also: `Insight API <https://github.com/dashevo/insight-api>`__"
msgstr ""

#: ../../developers/integration.rst:467
msgid "PHP: Bitcoin-PHP"
msgstr "PHP: Bitcoin-PHP"

#: ../../developers/integration.rst:469
msgid "https://github.com/snogcel/bitcoin-php"
msgstr ""

#: ../../developers/integration.rst:471
msgid ""
"Bitcoin-PHP is an implementation of Bitcoin with support for Dash using "
"mostly pure PHP."
msgstr ""

#: ../../developers/integration.rst:474
msgid "Platform: PHP"
msgstr "平台: PHP"

#: ../../developers/integration.rst:475
msgid ""
"Documentation: https://github.com/Bit-Wasp/bitcoin-"
"php/blob/master/doc/Introduction.md"
msgstr ""
"文档: https://github.com/Bit-Wasp/bitcoin-php/blob/master/doc/Introduction.md"

#: ../../developers/integration.rst:476
msgid "Repository: https://github.com/snogcel/bitcoin-php"
msgstr ""

#: ../../developers/integration.rst:479
msgid "Python: PyCoin"
msgstr "Python: PyCoin"

#: ../../developers/integration.rst:481
msgid "https://github.com/DeltaEngine/pycoin"
msgstr ""

#: ../../developers/integration.rst:483
msgid ""
"PyCoin is an implementation of a bunch of utility routines that may be "
"useful when dealing with Bitcoin and Dash. It has been tested with Python "
"2.7, 3.6 and 3.7."
msgstr ""

#: ../../developers/integration.rst:487
msgid "Platform: Python"
msgstr "平台: Python"

#: ../../developers/integration.rst:488
msgid "Documentation: https://pycoin.readthedocs.io/en/latest/"
msgstr "文档: https://pycoin.readthedocs.io/en/latest/"

#: ../../developers/integration.rst:489
msgid "Repository: https://github.com/DeltaEngine/pycoin"
msgstr ""

#: ../../developers/integration.rst:490
msgid ""
"See also: `JSON-RPC Utilities <https://github.com/DeltaEngine/python-"
"dashrpc>`__"
msgstr ""

#: ../../developers/integration.rst:493
msgid "Java: DashJ"
msgstr "Java: DashJ"

#: ../../developers/integration.rst:500
msgid "https://github.com/HashEngineering/dashj"
msgstr "https://github.com/HashEngineering/dashj"

#: ../../developers/integration.rst:502
msgid ""
"DashJ is a library for working with the Dash protocol. It can maintain a "
"wallet, send/receive transactions (including InstantSend) without needing a "
"local copy of Dash Core, and has many other advanced features. It's "
"implemented in Java but can be used from any JVM compatible language: "
"examples in Python and JavaScript are included."
msgstr ""
"DashJ是一个适用于达世币协议的库。它可以维护钱包的运行，支持达世币的接收与发送（包括即时发送功能），同时还具备许多其它高级功能，而且还无需建立Dash"
" Core钱包的副本。虽然它要借助Java才能实现各项功能，但它也可以借助Java虚拟机的兼容语言，其中包括Python和JavaScript中的示例。"

#: ../../developers/integration.rst:508
msgid "Platform: Java"
msgstr "平台：Java"

#: ../../developers/integration.rst:509
msgid "Documentation: https://bitcoinj.github.io/getting-started"
msgstr "说明文档的链接：https://bitcoinj.github.io/getting-started"

#: ../../developers/integration.rst:510
msgid "Repository: https://github.com/HashEngineering/dashj"
msgstr ""

#: ../../developers/integration.rst:511
msgid "Example application: https://github.com/tomasz-ludek/pocket-of-dash"
msgstr "应用示例：https://github.com/tomasz-ludek/pocket-of-dash"

#: ../../developers/integration.rst:514
msgid "Objective-C: Dash-Sync"
msgstr ""

#: ../../developers/integration.rst:521
msgid "https://github.com/dashevo/dashsync-iOS"
msgstr ""

#: ../../developers/integration.rst:523
msgid ""
"Dash-Sync is an Objective-C Dash blockchain framework for iOS. It implements"
" all most relevant Bitcoin Improvement Proposals (BIPs) and Dash Improvement"
" Proposals (DIPs)."
msgstr ""

#: ../../developers/integration.rst:527
msgid "Platform: iOS"
msgstr ""

#: ../../developers/integration.rst:528
msgid "Repository: https://github.com/dashevo/dashsync-iOS"
msgstr ""

#: ../../developers/integration.rst:531
msgid ".NET: NBitcoin"
msgstr ".NET: NBitcoin"

#: ../../developers/integration.rst:538
msgid "https://github.com/MetacoSA/NBitcoin"
msgstr "https://github.com/MetacoSA/NBitcoin"

#: ../../developers/integration.rst:540
msgid ""
"NBitcoin is the most complete Bitcoin library for the .NET platform, and has"
" been patched to include support for Dash. It implements all most relevant "
"Bitcoin Improvement Proposals (BIPs) and Dash Improvement Proposals (DIPs). "
"It also provides low level access to Dash primitives so you can easily build"
" your application on top of it."
msgstr ""
"NBitcoin是.NET平台上最完整的比特币程序库，并且在修补后可支持达世币。它不仅支持最新的比特币优化提案 (BIPs) 和达世币优化提案 "
"(DIPs) ，并且还提供对达世币原语的访问，从而帮助研发者以此为基础轻松地构建应用程序。"

#: ../../developers/integration.rst:546
msgid "Platform: .NET"
msgstr "平台：.NET"

#: ../../developers/integration.rst:547
msgid ""
"Documentation: "
"https://programmingblockchain.gitbooks.io/programmingblockchain/content/"
msgstr ""
"说明文档的链接：https://programmingblockchain.gitbooks.io/programmingblockchain/content/"

#: ../../developers/integration.rst:548
msgid "Repository: https://github.com/MetacoSA/NBitcoin"
msgstr "存储库：https://github.com/MetacoSA/NBitcoin"

#: ../../developers/integration.rst:549
msgid ""
"See also: `JSON-RPC Utilities <https://github.com/cryptean/bitcoinlib>`__"
msgstr ""

#: ../../developers/integration.rst:561
msgid "BlockCypher also offers client SDKs."
msgstr "BlockCypher也提供软件开发工具箱。"

#: ../../developers/integration.rst:563
msgid "Platform: Ruby, Python, Java, PHP, Go, NodeJS"
msgstr "平台：Ruby、Python、Java、PHP、Go及NodeJS"

#: ../../developers/integration.rst:564
msgid ""
"Repositories: https://www.blockcypher.com/dev/dash/#blockcypher-supported-"
"language-sdks"
msgstr ""
"存储库：https://www.blockcypher.com/dev/dash/#blockcypher-supported-language-"
"sdks"

#: ../../developers/integration.rst:576
msgid "Platform: JavaScript, PHP, Java, Ruby, .NET, Python"
msgstr "平台：JavaScript、PHP、Java、Ruby、.NET及Python"

#: ../../developers/integration.rst:577
msgid "Repositories: https://gocoin.com/docs"
msgstr "存储库：https://gocoin.com/docs"

#: ../../developers/integration.rst:581
msgid "Vending Machines"
msgstr "自动贩卖机"

#: ../../developers/integration.rst:583
msgid ""
"Community member moocowmoo has released code to help merchants build their "
"own vending machine and set it up to receive Dash InstantSend payments. The "
"Dashvend software can also be used to create any sort of payment system, "
"including point-of-sale systems, that can accept InstantSend payments."
msgstr ""
"达世币社区成员moocowmoo已经发布了代码，致力于帮助商家建立属于自己的自动售货机并使用即时发送功能接收顾客支付的款项。 "
"Dashvend软件可用于创建任何类型的支付系统，其中包括支持即时发送功能的POS系统。"

#: ../../developers/integration.rst:589
msgid "`Open Source Code <https://github.com/moocowmoo/dashvend>`_"
msgstr "`源代码 <https://github.com/moocowmoo/dashvend>`_"

#: ../../developers/integration.rst:590
msgid "`Demonstration website <http://code.dashndrink.com>`_"
msgstr "`演示网站 <http://code.dashndrink.com>`_"

#: ../../developers/integration.rst:591
msgid "`Demonstration video <https://www.youtube.com/watch?v=SX-3kwbam0o>`_"
msgstr "`演示视频 <https://www.youtube.com/watch?v=SX-3kwbam0o>`_"

#: ../../developers/integration.rst:595
msgid "Price Tickers"
msgstr "价格提示器"

#: ../../developers/integration.rst:597
msgid ""
"You can add a simple price ticker widget to your website using the simple "
"`code snippet generator from CoinGecko "
"<https://www.coingecko.com/en/widgets/ticker/dash/usd>`_."
msgstr ""

#: ../../developers/integration.rst:607
msgid ""
"Similar widgets with different designs are available from `CoinLib "
"<https://coinlib.io/widgets>`_, `WorldCoinIndex "
"<https://www.worldcoinindex.com/Widget>`_ and `Cryptonator "
"<https://www.cryptonator.com/widget>`_, while an API providing similar "
"information is available from `DashCentral "
"<https://www.dashcentral.org/about/api>`_."
msgstr ""
"除了上述应用和服务之外，\\ `CoinLib <https://coinlib.io/widgets>`_\\ ,\\ `WorldCoinIndex"
" <https://www.worldcoinindex.com/Widget>`_\\ 和\\ `Cryptonator "
"<https://www.cryptonator.com/widget>`_\\ 上还提供了具备不同设计和类似功能的组件。此外，\\ "
"`DashCentral <https://www.dashcentral.org/about/api>`_\\ 也提供类似信息的应用程序接口。"

#: ../../developers/integration.rst:615
msgid "QR Codes"
msgstr "二维码"

#: ../../developers/integration.rst:617
msgid ""
"Many wallets are capable of generating QR codes which can be scanned to "
"simplify entry of the Dash address. Printing these codes or posting the on "
"your website makes it easy to receive payment and tips in Dash, both online "
"and offline."
msgstr "很多钱包都能生成二维码，以便用户扫描和简化达世币地址的使用。打印二维码或将二维码公布在网站上可以简化二维码的线上和线下交易流程。"

#: ../../developers/integration.rst:622
msgid ""
"In Dash Core, go to the **Receive** tab, generate an address if necessary, "
"and double-click it to display a QR code. Right click on the QR code and "
"select **Save Image** to save a PNG file."
msgstr ""
"Dash Core钱包的用户可以打开 **接收** 选项卡，在必要的情况下生成地址，然后双击生成二维码。然后，右键单击二维码，并以PNG文件格式 "
"**保存图片**。"

#: ../../developers/integration.rst:625
msgid ""
"In Dash for Android, tap **Request Coins** and then tap the QR code to "
"display a larger image. You can screenshot this to save an image."
msgstr "Android版达世币钱包的用户可以点击 **申请付款** ，然后点击放大二维码，并截图保存。"

#: ../../developers/integration.rst:627
msgid ""
"In Dash for iOS, swipe to the left to display the **Receive Dash** screen. A"
" QR code and address will appear. You can screenshot this to save an image."
msgstr "iOS版达世币钱包的用户可以向左滑动，找到 **接收达世币** 页面。此时，页面上将显示二维码和达世币地址，用户就可以截图保存图像了。"

#: ../../developers/integration.rst:630
msgid ""
"To generate a QR code from any Dash address, visit `CWA QR Code Generator "
"<https://cwaqrgen.com/dash>`_ and simply paste your Dash address to generate"
" an image."
msgstr ""
"如需生成任何达世币地址的二维码，用户可以访问 `CWA 二维码生成器 <https://cwaqrgen.com/dash>`_ "
"页面并复制粘贴地址，以便生成二维码的图像。"
